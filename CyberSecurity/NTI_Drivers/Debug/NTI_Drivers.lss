
NTI_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000015ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000140  00800060  000015ce  00001662  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000025  008001a0  008001a0  000017a2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000017a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001800  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000588  00000000  00000000  0000183c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000043fe  00000000  00000000  00001dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013e1  00000000  00000000  000061c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000269a  00000000  00000000  000075a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001000  00000000  00000000  00009c40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000017b0  00000000  00000000  0000ac40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000340b  00000000  00000000  0000c3f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004f0  00000000  00000000  0000f7fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 5f 06 	jmp	0xcbe	; 0xcbe <__vector_1>
       8:	0c 94 89 06 	jmp	0xd12	; 0xd12 <__vector_2>
       c:	0c 94 b4 06 	jmp	0xd68	; 0xd68 <__vector_3>
      10:	0c 94 82 08 	jmp	0x1104	; 0x1104 <__vector_4>
      14:	0c 94 58 08 	jmp	0x10b0	; 0x10b0 <__vector_5>
      18:	0c 94 2e 08 	jmp	0x105c	; 0x105c <__vector_6>
      1c:	0c 94 da 07 	jmp	0xfb4	; 0xfb4 <__vector_7>
      20:	0c 94 04 08 	jmp	0x1008	; 0x1008 <__vector_8>
      24:	0c 94 b0 07 	jmp	0xf60	; 0xf60 <__vector_9>
      28:	0c 94 32 07 	jmp	0xe64	; 0xe64 <__vector_10>
      2c:	0c 94 08 07 	jmp	0xe10	; 0xe10 <__vector_11>
      30:	0c 94 de 06 	jmp	0xdbc	; 0xdbc <__vector_12>
      34:	0c 94 bc 08 	jmp	0x1178	; 0x1178 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 e6 08 	jmp	0x11cc	; 0x11cc <__vector_15>
      40:	0c 94 45 04 	jmp	0x88a	; 0x88a <__vector_16>
      44:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <__vector_17>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ec       	ldi	r30, 0xCE	; 206
      68:	f5 e1       	ldi	r31, 0x15	; 21
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 3a       	cpi	r26, 0xA0	; 160
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a0 ea       	ldi	r26, 0xA0	; 160
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3c       	cpi	r26, 0xC5	; 197
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 00 04 	call	0x800	; 0x800 <main>
      8a:	0c 94 e5 0a 	jmp	0x15ca	; 0x15ca <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <CS_T1_u32Generator>:
	
}

static void CS_T1_u32Generator()
{
	CS_RANDOM= TCNT1 | ((u32)(TCNT1*4) << 8);
      92:	2c b5       	in	r18, 0x2c	; 44
      94:	3d b5       	in	r19, 0x2d	; 45
      96:	4c b5       	in	r20, 0x2c	; 44
      98:	5d b5       	in	r21, 0x2d	; 45
      9a:	44 0f       	add	r20, r20
      9c:	55 1f       	adc	r21, r21
      9e:	44 0f       	add	r20, r20
      a0:	55 1f       	adc	r21, r21
      a2:	ca 01       	movw	r24, r20
      a4:	a0 e0       	ldi	r26, 0x00	; 0
      a6:	b0 e0       	ldi	r27, 0x00	; 0
      a8:	44 27       	eor	r20, r20
      aa:	58 2f       	mov	r21, r24
      ac:	69 2f       	mov	r22, r25
      ae:	7a 2f       	mov	r23, r26
      b0:	c9 01       	movw	r24, r18
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b0 e0       	ldi	r27, 0x00	; 0
      b6:	84 2b       	or	r24, r20
      b8:	95 2b       	or	r25, r21
      ba:	a6 2b       	or	r26, r22
      bc:	b7 2b       	or	r27, r23
      be:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <CS_RANDOM>
      c2:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <CS_RANDOM+0x1>
      c6:	a0 93 a4 01 	sts	0x01A4, r26	; 0x8001a4 <CS_RANDOM+0x2>
      ca:	b0 93 a5 01 	sts	0x01A5, r27	; 0x8001a5 <CS_RANDOM+0x3>
      ce:	08 95       	ret

000000d0 <CS_Init>:
volatile static u32 CS_KEY,CS_XOR_VAR=0xFFFFF,CS_RANDOM;
volatile static u8 CS_STATUS=CS_FALSE;		
volatile static u8 CS_ACCESS=DENIED;

void CS_Init()
{
      d0:	08 95       	ret

000000d2 <CS_SendCom>:
	}
}

void CS_SendCom(u8 copy_Serv, u8 copy_u8Sub, u16 copy_Rout)
{
	switch (copy_Serv)
      d2:	87 36       	cpi	r24, 0x67	; 103
      d4:	a1 f5       	brne	.+104    	; 0x13e <CS_SendCom+0x6c>
	{
		case 0x67:	
		switch(copy_u8Sub)
      d6:	61 30       	cpi	r22, 0x01	; 1
      d8:	79 f5       	brne	.+94     	; 0x138 <CS_SendCom+0x66>
		{
			case 0x01: //sending 4 random bytes afterwards and wait for 4 encrypted bytes
			
			LCD_Clear_Position(2,0,19);
      da:	43 e1       	ldi	r20, 0x13	; 19
      dc:	60 e0       	ldi	r22, 0x00	; 0
      de:	82 e0       	ldi	r24, 0x02	; 2
      e0:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_Clear_Position>
			LCD_GoTo(2,0);
      e4:	60 e0       	ldi	r22, 0x00	; 0
      e6:	82 e0       	ldi	r24, 0x02	; 2
      e8:	0e 94 55 03 	call	0x6aa	; 0x6aa <LCD_GoTo>
			LCD_WriteString("bytes: ");
      ec:	84 e8       	ldi	r24, 0x84	; 132
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	0e 94 74 03 	call	0x6e8	; 0x6e8 <LCD_WriteString>
			CS_T1_u32Generator();
      f4:	0e 94 49 00 	call	0x92	; 0x92 <CS_T1_u32Generator>
			LCD_WriteHexU32(CS_RANDOM);
      f8:	60 91 a2 01 	lds	r22, 0x01A2	; 0x8001a2 <CS_RANDOM>
      fc:	70 91 a3 01 	lds	r23, 0x01A3	; 0x8001a3 <CS_RANDOM+0x1>
     100:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <CS_RANDOM+0x2>
     104:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <CS_RANDOM+0x3>
     108:	0e 94 87 03 	call	0x70e	; 0x70e <LCD_WriteHexU32>
			//if you want a direct test case use the next variable 0x12005C48 instead of CS_RANDOM, the result is:
			//	0210 4C58
			//LCD_WriteString("0x12005C48");
			CS_XOR_VAR = (u32)(CS_RANDOM ^ SYMETRIC_KEY);
     10c:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <CS_RANDOM>
     110:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <CS_RANDOM+0x1>
     114:	a0 91 a4 01 	lds	r26, 0x01A4	; 0x8001a4 <CS_RANDOM+0x2>
     118:	b0 91 a5 01 	lds	r27, 0x01A5	; 0x8001a5 <CS_RANDOM+0x3>
     11c:	20 e1       	ldi	r18, 0x10	; 16
     11e:	82 27       	eor	r24, r18
     120:	92 27       	eor	r25, r18
     122:	a2 27       	eor	r26, r18
     124:	b2 27       	eor	r27, r18
     126:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     12a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     12e:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     132:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
			default:
			CS_STATUS=CS_FALSE;
			return CS_FALSE;
		}
		
		break;
     136:	08 95       	ret
			CS_XOR_VAR = (u32)(CS_RANDOM ^ SYMETRIC_KEY);
			
			break;
			
			default:
			CS_STATUS=CS_FALSE;
     138:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <CS_STATUS>
			return CS_FALSE;
     13c:	08 95       	ret
		}
		
		break;
		default:
		CS_STATUS=CS_FALSE;
     13e:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <CS_STATUS>
     142:	08 95       	ret

00000144 <CS_ReceiveCom>:
	CS_RANDOM= TCNT1 | ((u32)(TCNT1*4) << 8);
	
}

CS_BOOL CS_ReceiveCom()
{
     144:	cf 93       	push	r28
	switch (CS_Service)
     146:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <CS_Service>
     14a:	87 32       	cpi	r24, 0x27	; 39
     14c:	09 f4       	brne	.+2      	; 0x150 <CS_ReceiveCom+0xc>
     14e:	58 c0       	rjmp	.+176    	; 0x200 <CS_ReceiveCom+0xbc>
     150:	81 33       	cpi	r24, 0x31	; 49
     152:	09 f0       	breq	.+2      	; 0x156 <CS_ReceiveCom+0x12>
     154:	be c0       	rjmp	.+380    	; 0x2d2 <CS_ReceiveCom+0x18e>
	{
		case 0x31:	//turn on led (check security access first)
		switch (CS_Sub)
     156:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <CS_Sub>
     15a:	81 30       	cpi	r24, 0x01	; 1
     15c:	09 f0       	breq	.+2      	; 0x160 <CS_ReceiveCom+0x1c>
     15e:	4c c0       	rjmp	.+152    	; 0x1f8 <CS_ReceiveCom+0xb4>
		{
			case 0x01:
			if (CS_Routine == 0xAA00)
     160:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <CS_Routine>
     164:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <CS_Routine+0x1>
     168:	81 15       	cp	r24, r1
     16a:	9a 4a       	sbci	r25, 0xAA	; 170
     16c:	09 f0       	breq	.+2      	; 0x170 <CS_ReceiveCom+0x2c>
     16e:	44 c0       	rjmp	.+136    	; 0x1f8 <CS_ReceiveCom+0xb4>
			{
				if(CS_ACCESS==DENIED)
     170:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <__data_end>
     174:	81 11       	cpse	r24, r1
     176:	1e c0       	rjmp	.+60     	; 0x1b4 <CS_ReceiveCom+0x70>
				{
					LCD_Clear_Position(4,0,19);
     178:	43 e1       	ldi	r20, 0x13	; 19
     17a:	60 e0       	ldi	r22, 0x00	; 0
     17c:	84 e0       	ldi	r24, 0x04	; 4
     17e:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_Clear_Position>
					LCD_GoTo(4,0);
     182:	60 e0       	ldi	r22, 0x00	; 0
     184:	84 e0       	ldi	r24, 0x04	; 4
     186:	0e 94 55 03 	call	0x6aa	; 0x6aa <LCD_GoTo>
					LCD_WriteString("Request to ON LED");
     18a:	8c e8       	ldi	r24, 0x8C	; 140
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	0e 94 74 03 	call	0x6e8	; 0x6e8 <LCD_WriteString>
					LCD_Clear_Position(2,0,20);
     192:	44 e1       	ldi	r20, 0x14	; 20
     194:	60 e0       	ldi	r22, 0x00	; 0
     196:	82 e0       	ldi	r24, 0x02	; 2
     198:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_Clear_Position>
					LCD_GoTo(2,0);
     19c:	60 e0       	ldi	r22, 0x00	; 0
     19e:	82 e0       	ldi	r24, 0x02	; 2
     1a0:	0e 94 55 03 	call	0x6aa	; 0x6aa <LCD_GoTo>
					LCD_WriteString("NRC (7F 31 35)");//NRC access denied (7f 31 35)
     1a4:	8e e9       	ldi	r24, 0x9E	; 158
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	0e 94 74 03 	call	0x6e8	; 0x6e8 <LCD_WriteString>
					CS_STATUS=CS_TRUE;
     1ac:	81 e0       	ldi	r24, 0x01	; 1
     1ae:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <CS_STATUS>
					return CS_TRUE;
     1b2:	93 c0       	rjmp	.+294    	; 0x2da <CS_ReceiveCom+0x196>
				}
				else
				{
					LCD_Clear_Position(4,0,19);
     1b4:	43 e1       	ldi	r20, 0x13	; 19
     1b6:	60 e0       	ldi	r22, 0x00	; 0
     1b8:	84 e0       	ldi	r24, 0x04	; 4
     1ba:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_Clear_Position>
					LCD_GoTo(4,0);
     1be:	60 e0       	ldi	r22, 0x00	; 0
     1c0:	84 e0       	ldi	r24, 0x04	; 4
     1c2:	0e 94 55 03 	call	0x6aa	; 0x6aa <LCD_GoTo>
					LCD_WriteString("Request to ON LED");
     1c6:	8c e8       	ldi	r24, 0x8C	; 140
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	0e 94 74 03 	call	0x6e8	; 0x6e8 <LCD_WriteString>
					LCD_Clear_Position(2,0,20);
     1ce:	44 e1       	ldi	r20, 0x14	; 20
     1d0:	60 e0       	ldi	r22, 0x00	; 0
     1d2:	82 e0       	ldi	r24, 0x02	; 2
     1d4:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_Clear_Position>
					LCD_GoTo(2,0);
     1d8:	60 e0       	ldi	r22, 0x00	; 0
     1da:	82 e0       	ldi	r24, 0x02	; 2
     1dc:	0e 94 55 03 	call	0x6aa	; 0x6aa <LCD_GoTo>
					LCD_WriteString("(71 01 AA 00)");
     1e0:	8d ea       	ldi	r24, 0xAD	; 173
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	0e 94 74 03 	call	0x6e8	; 0x6e8 <LCD_WriteString>
					DIO_SetPin(PINC0,HIGH);
     1e8:	61 e0       	ldi	r22, 0x01	; 1
     1ea:	80 e1       	ldi	r24, 0x10	; 16
     1ec:	0e 94 7e 05 	call	0xafc	; 0xafc <DIO_SetPin>
					CS_STATUS=CS_TRUE;
     1f0:	81 e0       	ldi	r24, 0x01	; 1
     1f2:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <CS_STATUS>
					return CS_TRUE;
     1f6:	71 c0       	rjmp	.+226    	; 0x2da <CS_ReceiveCom+0x196>
				}
				break;
			}
			
			default:
			CS_STATUS=CS_FALSE;
     1f8:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <CS_STATUS>
			return CS_FALSE;
     1fc:	80 e0       	ldi	r24, 0x00	; 0
     1fe:	6d c0       	rjmp	.+218    	; 0x2da <CS_ReceiveCom+0x196>
		}
		
		
		case 0x27:	
		switch(CS_Sub)
     200:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <CS_Sub>
     204:	81 30       	cpi	r24, 0x01	; 1
     206:	19 f0       	breq	.+6      	; 0x20e <CS_ReceiveCom+0xca>
     208:	82 30       	cpi	r24, 0x02	; 2
     20a:	c1 f0       	breq	.+48     	; 0x23c <CS_ReceiveCom+0xf8>
     20c:	5e c0       	rjmp	.+188    	; 0x2ca <CS_ReceiveCom+0x186>
		{
			case 0x01:	//01 to ask for security access
			LCD_Clear_Position(4,0,19);
     20e:	43 e1       	ldi	r20, 0x13	; 19
     210:	60 e0       	ldi	r22, 0x00	; 0
     212:	84 e0       	ldi	r24, 0x04	; 4
     214:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_Clear_Position>
			LCD_GoTo(4,0);
     218:	60 e0       	ldi	r22, 0x00	; 0
     21a:	84 e0       	ldi	r24, 0x04	; 4
     21c:	0e 94 55 03 	call	0x6aa	; 0x6aa <LCD_GoTo>
			LCD_WriteString("Access requested...");
     220:	8b eb       	ldi	r24, 0xBB	; 187
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	0e 94 74 03 	call	0x6e8	; 0x6e8 <LCD_WriteString>
			//access requested so we are sending the 4 random bytes
			CS_SendCom(0x67,0x01,0x0000);
     228:	40 e0       	ldi	r20, 0x00	; 0
     22a:	50 e0       	ldi	r21, 0x00	; 0
     22c:	61 e0       	ldi	r22, 0x01	; 1
     22e:	87 e6       	ldi	r24, 0x67	; 103
     230:	0e 94 69 00 	call	0xd2	; 0xd2 <CS_SendCom>
			CS_STATUS=CS_REQUEST;
     234:	82 e0       	ldi	r24, 0x02	; 2
     236:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <CS_STATUS>
			return CS_REQUEST;
     23a:	4f c0       	rjmp	.+158    	; 0x2da <CS_ReceiveCom+0x196>
			break;
			case 0x02:	//02 to send the 4 encrypted bytes afterwards
						//afterwards the MC shall send one of two coms (6702 for OK, 7f2735 for NOK)
			if(CS_STATUS==CS_REQUEST)
     23c:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <CS_STATUS>
     240:	82 30       	cpi	r24, 0x02	; 2
     242:	39 f5       	brne	.+78     	; 0x292 <CS_ReceiveCom+0x14e>
			{
				//we need to check the XOR-ed value from the terminal then compare it to our value on the MC
				//we already have the value of the subroutine in the global variable
				if (CS_Routine == CS_XOR_VAR)
     244:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <CS_Routine>
     248:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <CS_Routine+0x1>
     24c:	a0 e0       	ldi	r26, 0x00	; 0
     24e:	b0 e0       	ldi	r27, 0x00	; 0
     250:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     254:	50 91 61 00 	lds	r21, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     258:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     25c:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     260:	84 17       	cp	r24, r20
     262:	95 07       	cpc	r25, r21
     264:	a6 07       	cpc	r26, r22
     266:	b7 07       	cpc	r27, r23
     268:	c1 f5       	brne	.+112    	; 0x2da <CS_ReceiveCom+0x196>
				{
					CS_STATUS=CS_TRUE;
     26a:	c1 e0       	ldi	r28, 0x01	; 1
     26c:	c0 93 a1 01 	sts	0x01A1, r28	; 0x8001a1 <CS_STATUS>
					LCD_Clear_Position(4,0,20);
     270:	44 e1       	ldi	r20, 0x14	; 20
     272:	60 e0       	ldi	r22, 0x00	; 0
     274:	84 e0       	ldi	r24, 0x04	; 4
     276:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_Clear_Position>
					LCD_GoTo(4,0);
     27a:	60 e0       	ldi	r22, 0x00	; 0
     27c:	84 e0       	ldi	r24, 0x04	; 4
     27e:	0e 94 55 03 	call	0x6aa	; 0x6aa <LCD_GoTo>
					LCD_WriteString("Access granted.");
     282:	8f ec       	ldi	r24, 0xCF	; 207
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	0e 94 74 03 	call	0x6e8	; 0x6e8 <LCD_WriteString>
					CS_ACCESS=GRANTED;
     28a:	c0 93 a0 01 	sts	0x01A0, r28	; 0x8001a0 <__data_end>
					return CS_TRUE;
     28e:	81 e0       	ldi	r24, 0x01	; 1
     290:	24 c0       	rjmp	.+72     	; 0x2da <CS_ReceiveCom+0x196>
				}
			}
			else
			{
				LCD_Clear_Position(2,0,20);
     292:	44 e1       	ldi	r20, 0x14	; 20
     294:	60 e0       	ldi	r22, 0x00	; 0
     296:	82 e0       	ldi	r24, 0x02	; 2
     298:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_Clear_Position>
				LCD_GoTo(2,0);
     29c:	60 e0       	ldi	r22, 0x00	; 0
     29e:	82 e0       	ldi	r24, 0x02	; 2
     2a0:	0e 94 55 03 	call	0x6aa	; 0x6aa <LCD_GoTo>
				LCD_WriteString("ask for request 1st");
     2a4:	8f ed       	ldi	r24, 0xDF	; 223
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	0e 94 74 03 	call	0x6e8	; 0x6e8 <LCD_WriteString>
				LCD_Clear_Position(4,0,20);
     2ac:	44 e1       	ldi	r20, 0x14	; 20
     2ae:	60 e0       	ldi	r22, 0x00	; 0
     2b0:	84 e0       	ldi	r24, 0x04	; 4
     2b2:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_Clear_Position>
				LCD_GoTo(4,0);
     2b6:	60 e0       	ldi	r22, 0x00	; 0
     2b8:	84 e0       	ldi	r24, 0x04	; 4
     2ba:	0e 94 55 03 	call	0x6aa	; 0x6aa <LCD_GoTo>
				LCD_WriteString("chck encrypted bytes");
     2be:	83 ef       	ldi	r24, 0xF3	; 243
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	0e 94 74 03 	call	0x6e8	; 0x6e8 <LCD_WriteString>
				return CS_REQUEST;
     2c6:	82 e0       	ldi	r24, 0x02	; 2
     2c8:	08 c0       	rjmp	.+16     	; 0x2da <CS_ReceiveCom+0x196>
			}
			break;
			default:
			CS_STATUS=CS_FALSE;
     2ca:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <CS_STATUS>
			return CS_FALSE;
     2ce:	80 e0       	ldi	r24, 0x00	; 0
     2d0:	04 c0       	rjmp	.+8      	; 0x2da <CS_ReceiveCom+0x196>
		}
		
		break;
		default:
		CS_STATUS=CS_FALSE;
     2d2:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <CS_STATUS>
		return CS_FALSE;
     2d6:	80 e0       	ldi	r24, 0x00	; 0
     2d8:	00 c0       	rjmp	.+0      	; 0x2da <CS_ReceiveCom+0x196>
	}
}
     2da:	cf 91       	pop	r28
     2dc:	08 95       	ret

000002de <CS_ReceiveEncrypted>:
}



CS_BOOL CS_ReceiveEncrypted(u32 copy_Encrpt)
{
     2de:	0f 93       	push	r16
     2e0:	1f 93       	push	r17
     2e2:	cf 93       	push	r28
	if(CS_STATUS==CS_REQUEST)
     2e4:	20 91 a1 01 	lds	r18, 0x01A1	; 0x8001a1 <CS_STATUS>
     2e8:	22 30       	cpi	r18, 0x02	; 2
     2ea:	e1 f5       	brne	.+120    	; 0x364 <CS_ReceiveEncrypted+0x86>
	{
		//we need to check the XOR-ed value from the terminal then compare it to our value on the MC
		//we already have the value of the subroutine in the global variable
		if (copy_Encrpt == CS_XOR_VAR)
     2ec:	00 91 60 00 	lds	r16, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     2f0:	10 91 61 00 	lds	r17, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     2f4:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     2f8:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     2fc:	06 17       	cp	r16, r22
     2fe:	17 07       	cpc	r17, r23
     300:	28 07       	cpc	r18, r24
     302:	39 07       	cpc	r19, r25
     304:	09 f5       	brne	.+66     	; 0x348 <CS_ReceiveEncrypted+0x6a>
		{
			CS_STATUS=CS_TRUE;
     306:	c1 e0       	ldi	r28, 0x01	; 1
     308:	c0 93 a1 01 	sts	0x01A1, r28	; 0x8001a1 <CS_STATUS>
			LCD_Clear_Position(4,0,20);
     30c:	44 e1       	ldi	r20, 0x14	; 20
     30e:	60 e0       	ldi	r22, 0x00	; 0
     310:	84 e0       	ldi	r24, 0x04	; 4
     312:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_Clear_Position>
			LCD_GoTo(4,0);
     316:	60 e0       	ldi	r22, 0x00	; 0
     318:	84 e0       	ldi	r24, 0x04	; 4
     31a:	0e 94 55 03 	call	0x6aa	; 0x6aa <LCD_GoTo>
			LCD_WriteString("Encrypted 4 bytes");
     31e:	88 e0       	ldi	r24, 0x08	; 8
     320:	91 e0       	ldi	r25, 0x01	; 1
     322:	0e 94 74 03 	call	0x6e8	; 0x6e8 <LCD_WriteString>
			LCD_Clear_Position(2,0,20);
     326:	44 e1       	ldi	r20, 0x14	; 20
     328:	60 e0       	ldi	r22, 0x00	; 0
     32a:	82 e0       	ldi	r24, 0x02	; 2
     32c:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_Clear_Position>
			LCD_GoTo(2,0);
     330:	60 e0       	ldi	r22, 0x00	; 0
     332:	82 e0       	ldi	r24, 0x02	; 2
     334:	0e 94 55 03 	call	0x6aa	; 0x6aa <LCD_GoTo>
			LCD_WriteString("Access granted(6702)");
     338:	8a e1       	ldi	r24, 0x1A	; 26
     33a:	91 e0       	ldi	r25, 0x01	; 1
     33c:	0e 94 74 03 	call	0x6e8	; 0x6e8 <LCD_WriteString>
			CS_ACCESS=GRANTED;
     340:	c0 93 a0 01 	sts	0x01A0, r28	; 0x8001a0 <__data_end>
			return CS_TRUE;
     344:	81 e0       	ldi	r24, 0x01	; 1
     346:	1c c0       	rjmp	.+56     	; 0x380 <CS_ReceiveEncrypted+0xa2>
		}
		else
		{
			LCD_Clear_Position(4,0,20);
     348:	44 e1       	ldi	r20, 0x14	; 20
     34a:	60 e0       	ldi	r22, 0x00	; 0
     34c:	84 e0       	ldi	r24, 0x04	; 4
     34e:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_Clear_Position>
			LCD_GoTo(4,0);
     352:	60 e0       	ldi	r22, 0x00	; 0
     354:	84 e0       	ldi	r24, 0x04	; 4
     356:	0e 94 55 03 	call	0x6aa	; 0x6aa <LCD_GoTo>
			LCD_WriteString("NRC (7F 27 35)");
     35a:	8f e2       	ldi	r24, 0x2F	; 47
     35c:	91 e0       	ldi	r25, 0x01	; 1
     35e:	0e 94 74 03 	call	0x6e8	; 0x6e8 <LCD_WriteString>
		LCD_GoTo(4,0);
		LCD_WriteString("Request Access 1st");
		return CS_REQUEST;
	}
	
}
     362:	0e c0       	rjmp	.+28     	; 0x380 <CS_ReceiveEncrypted+0xa2>
			LCD_WriteString("NRC (7F 27 35)");
		}
	}
	else
	{
		LCD_Clear_Position(4,0,20);
     364:	44 e1       	ldi	r20, 0x14	; 20
     366:	60 e0       	ldi	r22, 0x00	; 0
     368:	84 e0       	ldi	r24, 0x04	; 4
     36a:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_Clear_Position>
		LCD_GoTo(4,0);
     36e:	60 e0       	ldi	r22, 0x00	; 0
     370:	84 e0       	ldi	r24, 0x04	; 4
     372:	0e 94 55 03 	call	0x6aa	; 0x6aa <LCD_GoTo>
		LCD_WriteString("Request Access 1st");
     376:	8e e3       	ldi	r24, 0x3E	; 62
     378:	91 e0       	ldi	r25, 0x01	; 1
     37a:	0e 94 74 03 	call	0x6e8	; 0x6e8 <LCD_WriteString>
		return CS_REQUEST;
     37e:	82 e0       	ldi	r24, 0x02	; 2
	}
	
}
     380:	cf 91       	pop	r28
     382:	1f 91       	pop	r17
     384:	0f 91       	pop	r16
     386:	08 95       	ret

00000388 <CS_ConvertString>:

void CS_ConvertString(u8 * str)
{
     388:	0f 93       	push	r16
     38a:	1f 93       	push	r17
     38c:	cf 93       	push	r28
     38e:	df 93       	push	r29
     390:	cd b7       	in	r28, 0x3d	; 61
     392:	de b7       	in	r29, 0x3e	; 62
     394:	64 97       	sbiw	r28, 0x14	; 20
     396:	0f b6       	in	r0, 0x3f	; 63
     398:	f8 94       	cli
     39a:	de bf       	out	0x3e, r29	; 62
     39c:	0f be       	out	0x3f, r0	; 63
     39e:	cd bf       	out	0x3d, r28	; 61
     3a0:	8c 01       	movw	r16, r24
	// Extract substrings
	char aa[3];    // 2 characters for 'aa' + 1 for service
	char bb[3];    // 2 characters for 'bb' + 1 for subservice
	char cccc[5];  // 4 characters for 'cccc' + 1 for routine and in requesting access it's gonna be the encrypted 4 bytes
	char dddd[9];
	if (CS_STATUS==CS_TRUE || CS_STATUS==CS_FALSE)
     3a2:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <CS_STATUS>
     3a6:	81 30       	cpi	r24, 0x01	; 1
     3a8:	21 f0       	breq	.+8      	; 0x3b2 <CS_ConvertString+0x2a>
     3aa:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <CS_STATUS>
     3ae:	81 11       	cpse	r24, r1
     3b0:	3d c0       	rjmp	.+122    	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
	{
		strncpy(aa, str, 2);
     3b2:	42 e0       	ldi	r20, 0x02	; 2
     3b4:	50 e0       	ldi	r21, 0x00	; 0
     3b6:	b8 01       	movw	r22, r16
     3b8:	ce 01       	movw	r24, r28
     3ba:	01 96       	adiw	r24, 0x01	; 1
     3bc:	0e 94 8c 0a 	call	0x1518	; 0x1518 <strncpy>
		aa[2] = '\0';
     3c0:	1b 82       	std	Y+3, r1	; 0x03

		strncpy(bb, str + 2, 2);
     3c2:	b8 01       	movw	r22, r16
     3c4:	6e 5f       	subi	r22, 0xFE	; 254
     3c6:	7f 4f       	sbci	r23, 0xFF	; 255
     3c8:	42 e0       	ldi	r20, 0x02	; 2
     3ca:	50 e0       	ldi	r21, 0x00	; 0
     3cc:	ce 01       	movw	r24, r28
     3ce:	04 96       	adiw	r24, 0x04	; 4
     3d0:	0e 94 8c 0a 	call	0x1518	; 0x1518 <strncpy>
		bb[2] = '\0';
     3d4:	1e 82       	std	Y+6, r1	; 0x06

		strncpy(cccc, str + 4, 4);
     3d6:	b8 01       	movw	r22, r16
     3d8:	6c 5f       	subi	r22, 0xFC	; 252
     3da:	7f 4f       	sbci	r23, 0xFF	; 255
     3dc:	44 e0       	ldi	r20, 0x04	; 4
     3de:	50 e0       	ldi	r21, 0x00	; 0
     3e0:	ce 01       	movw	r24, r28
     3e2:	07 96       	adiw	r24, 0x07	; 7
     3e4:	0e 94 8c 0a 	call	0x1518	; 0x1518 <strncpy>
		cccc[4] = '\0';
     3e8:	1b 86       	std	Y+11, r1	; 0x0b
		// Convert substrings to desired data types
		CS_Service = (u8) strtol(aa, NULL, 16);
     3ea:	40 e1       	ldi	r20, 0x10	; 16
     3ec:	50 e0       	ldi	r21, 0x00	; 0
     3ee:	60 e0       	ldi	r22, 0x00	; 0
     3f0:	70 e0       	ldi	r23, 0x00	; 0
     3f2:	ce 01       	movw	r24, r28
     3f4:	01 96       	adiw	r24, 0x01	; 1
     3f6:	0e 94 6d 09 	call	0x12da	; 0x12da <strtol>
     3fa:	60 93 ad 01 	sts	0x01AD, r22	; 0x8001ad <CS_Service>
		CS_Sub = (u8) strtol(bb, NULL, 16);
     3fe:	40 e1       	ldi	r20, 0x10	; 16
     400:	50 e0       	ldi	r21, 0x00	; 0
     402:	60 e0       	ldi	r22, 0x00	; 0
     404:	70 e0       	ldi	r23, 0x00	; 0
     406:	ce 01       	movw	r24, r28
     408:	04 96       	adiw	r24, 0x04	; 4
     40a:	0e 94 6d 09 	call	0x12da	; 0x12da <strtol>
     40e:	60 93 ac 01 	sts	0x01AC, r22	; 0x8001ac <CS_Sub>
		CS_Routine = (u16) strtol(cccc, NULL, 16);
     412:	40 e1       	ldi	r20, 0x10	; 16
     414:	50 e0       	ldi	r21, 0x00	; 0
     416:	60 e0       	ldi	r22, 0x00	; 0
     418:	70 e0       	ldi	r23, 0x00	; 0
     41a:	ce 01       	movw	r24, r28
     41c:	07 96       	adiw	r24, 0x07	; 7
     41e:	0e 94 6d 09 	call	0x12da	; 0x12da <strtol>
     422:	70 93 ab 01 	sts	0x01AB, r23	; 0x8001ab <CS_Routine+0x1>
     426:	60 93 aa 01 	sts	0x01AA, r22	; 0x8001aa <CS_Routine>
	char aa[3];    // 2 characters for 'aa' + 1 for service
	char bb[3];    // 2 characters for 'bb' + 1 for subservice
	char cccc[5];  // 4 characters for 'cccc' + 1 for routine and in requesting access it's gonna be the encrypted 4 bytes
	char dddd[9];
	if (CS_STATUS==CS_TRUE || CS_STATUS==CS_FALSE)
	{
     42a:	4f c0       	rjmp	.+158    	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
		// Convert substrings to desired data types
		CS_Service = (u8) strtol(aa, NULL, 16);
		CS_Sub = (u8) strtol(bb, NULL, 16);
		CS_Routine = (u16) strtol(cccc, NULL, 16);
	}
	else if (CS_STATUS==CS_REQUEST)
     42c:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <CS_STATUS>
     430:	82 30       	cpi	r24, 0x02	; 2
     432:	09 f0       	breq	.+2      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
     434:	4a c0       	rjmp	.+148    	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
	{
		strncpy(aa, str, 2);
     436:	42 e0       	ldi	r20, 0x02	; 2
     438:	50 e0       	ldi	r21, 0x00	; 0
     43a:	b8 01       	movw	r22, r16
     43c:	ce 01       	movw	r24, r28
     43e:	01 96       	adiw	r24, 0x01	; 1
     440:	0e 94 8c 0a 	call	0x1518	; 0x1518 <strncpy>
		aa[2] = '\0';
     444:	1b 82       	std	Y+3, r1	; 0x03

		strncpy(bb, str + 2, 2);
     446:	b8 01       	movw	r22, r16
     448:	6e 5f       	subi	r22, 0xFE	; 254
     44a:	7f 4f       	sbci	r23, 0xFF	; 255
     44c:	42 e0       	ldi	r20, 0x02	; 2
     44e:	50 e0       	ldi	r21, 0x00	; 0
     450:	ce 01       	movw	r24, r28
     452:	04 96       	adiw	r24, 0x04	; 4
     454:	0e 94 8c 0a 	call	0x1518	; 0x1518 <strncpy>
		bb[2] = '\0';
     458:	1e 82       	std	Y+6, r1	; 0x06

		strncpy(dddd, str + 4, 8);
     45a:	b8 01       	movw	r22, r16
     45c:	6c 5f       	subi	r22, 0xFC	; 252
     45e:	7f 4f       	sbci	r23, 0xFF	; 255
     460:	48 e0       	ldi	r20, 0x08	; 8
     462:	50 e0       	ldi	r21, 0x00	; 0
     464:	ce 01       	movw	r24, r28
     466:	0c 96       	adiw	r24, 0x0c	; 12
     468:	0e 94 8c 0a 	call	0x1518	; 0x1518 <strncpy>
		dddd[8] = '\0';
     46c:	1c 8a       	std	Y+20, r1	; 0x14
		// Convert substrings to desired data types
		CS_Service = (u8)strtol(aa, NULL, 16);
     46e:	40 e1       	ldi	r20, 0x10	; 16
     470:	50 e0       	ldi	r21, 0x00	; 0
     472:	60 e0       	ldi	r22, 0x00	; 0
     474:	70 e0       	ldi	r23, 0x00	; 0
     476:	ce 01       	movw	r24, r28
     478:	01 96       	adiw	r24, 0x01	; 1
     47a:	0e 94 6d 09 	call	0x12da	; 0x12da <strtol>
     47e:	60 93 ad 01 	sts	0x01AD, r22	; 0x8001ad <CS_Service>
		CS_Sub = (u8)strtol(bb, NULL, 16);
     482:	40 e1       	ldi	r20, 0x10	; 16
     484:	50 e0       	ldi	r21, 0x00	; 0
     486:	60 e0       	ldi	r22, 0x00	; 0
     488:	70 e0       	ldi	r23, 0x00	; 0
     48a:	ce 01       	movw	r24, r28
     48c:	04 96       	adiw	r24, 0x04	; 4
     48e:	0e 94 6d 09 	call	0x12da	; 0x12da <strtol>
     492:	60 93 ac 01 	sts	0x01AC, r22	; 0x8001ac <CS_Sub>
		CS_KEY = (u32)strtol(dddd, NULL, 16);
     496:	40 e1       	ldi	r20, 0x10	; 16
     498:	50 e0       	ldi	r21, 0x00	; 0
     49a:	60 e0       	ldi	r22, 0x00	; 0
     49c:	70 e0       	ldi	r23, 0x00	; 0
     49e:	ce 01       	movw	r24, r28
     4a0:	0c 96       	adiw	r24, 0x0c	; 12
     4a2:	0e 94 6d 09 	call	0x12da	; 0x12da <strtol>
     4a6:	60 93 a6 01 	sts	0x01A6, r22	; 0x8001a6 <CS_KEY>
     4aa:	70 93 a7 01 	sts	0x01A7, r23	; 0x8001a7 <CS_KEY+0x1>
     4ae:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <CS_KEY+0x2>
     4b2:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <CS_KEY+0x3>
		CS_ReceiveEncrypted(CS_KEY);
     4b6:	60 91 a6 01 	lds	r22, 0x01A6	; 0x8001a6 <CS_KEY>
     4ba:	70 91 a7 01 	lds	r23, 0x01A7	; 0x8001a7 <CS_KEY+0x1>
     4be:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <CS_KEY+0x2>
     4c2:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <CS_KEY+0x3>
     4c6:	0e 94 6f 01 	call	0x2de	; 0x2de <CS_ReceiveEncrypted>
	}
	
}
     4ca:	64 96       	adiw	r28, 0x14	; 20
     4cc:	0f b6       	in	r0, 0x3f	; 63
     4ce:	f8 94       	cli
     4d0:	de bf       	out	0x3e, r29	; 62
     4d2:	0f be       	out	0x3f, r0	; 63
     4d4:	cd bf       	out	0x3d, r28	; 61
     4d6:	df 91       	pop	r29
     4d8:	cf 91       	pop	r28
     4da:	1f 91       	pop	r17
     4dc:	0f 91       	pop	r16
     4de:	08 95       	ret

000004e0 <CS_getAccess>:

ACCESS_TYPE CS_getAccess()
{
	return CS_ACCESS;
     4e0:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <__data_end>
}
     4e4:	08 95       	ret

000004e6 <CS_getStatus>:

CS_BOOL CS_getStatus()
{
	return CS_STATUS;
     4e6:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <CS_STATUS>
     4ea:	08 95       	ret

000004ec <LCD_Instruction>:
			_delay_ms(1);
			LCD_WriteData(customchar[i]);
		}
		LCD_Instruction(0x80);
	}
}
     4ec:	cf 93       	push	r28
     4ee:	c8 2f       	mov	r28, r24
     4f0:	60 e0       	ldi	r22, 0x00	; 0
     4f2:	83 e0       	ldi	r24, 0x03	; 3
     4f4:	0e 94 7e 05 	call	0xafc	; 0xafc <DIO_SetPin>
     4f8:	6c 2f       	mov	r22, r28
     4fa:	66 1f       	adc	r22, r22
     4fc:	66 27       	eor	r22, r22
     4fe:	66 1f       	adc	r22, r22
     500:	8c e0       	ldi	r24, 0x0C	; 12
     502:	0e 94 7e 05 	call	0xafc	; 0xafc <DIO_SetPin>
     506:	c6 fb       	bst	r28, 6
     508:	66 27       	eor	r22, r22
     50a:	60 f9       	bld	r22, 0
     50c:	8a e0       	ldi	r24, 0x0A	; 10
     50e:	0e 94 7e 05 	call	0xafc	; 0xafc <DIO_SetPin>
     512:	c5 fb       	bst	r28, 5
     514:	66 27       	eor	r22, r22
     516:	60 f9       	bld	r22, 0
     518:	89 e0       	ldi	r24, 0x09	; 9
     51a:	0e 94 7e 05 	call	0xafc	; 0xafc <DIO_SetPin>
     51e:	c4 fb       	bst	r28, 4
     520:	66 27       	eor	r22, r22
     522:	60 f9       	bld	r22, 0
     524:	88 e0       	ldi	r24, 0x08	; 8
     526:	0e 94 7e 05 	call	0xafc	; 0xafc <DIO_SetPin>
     52a:	61 e0       	ldi	r22, 0x01	; 1
     52c:	82 e0       	ldi	r24, 0x02	; 2
     52e:	0e 94 7e 05 	call	0xafc	; 0xafc <DIO_SetPin>
     532:	8f ec       	ldi	r24, 0xCF	; 207
     534:	97 e0       	ldi	r25, 0x07	; 7
     536:	01 97       	sbiw	r24, 0x01	; 1
     538:	f1 f7       	brne	.-4      	; 0x536 <LCD_Instruction+0x4a>
     53a:	00 c0       	rjmp	.+0      	; 0x53c <LCD_Instruction+0x50>
     53c:	00 00       	nop
     53e:	60 e0       	ldi	r22, 0x00	; 0
     540:	82 e0       	ldi	r24, 0x02	; 2
     542:	0e 94 7e 05 	call	0xafc	; 0xafc <DIO_SetPin>
     546:	8f ec       	ldi	r24, 0xCF	; 207
     548:	97 e0       	ldi	r25, 0x07	; 7
     54a:	01 97       	sbiw	r24, 0x01	; 1
     54c:	f1 f7       	brne	.-4      	; 0x54a <LCD_Instruction+0x5e>
     54e:	00 c0       	rjmp	.+0      	; 0x550 <LCD_Instruction+0x64>
     550:	00 00       	nop
     552:	c3 fb       	bst	r28, 3
     554:	66 27       	eor	r22, r22
     556:	60 f9       	bld	r22, 0
     558:	8c e0       	ldi	r24, 0x0C	; 12
     55a:	0e 94 7e 05 	call	0xafc	; 0xafc <DIO_SetPin>
     55e:	c2 fb       	bst	r28, 2
     560:	66 27       	eor	r22, r22
     562:	60 f9       	bld	r22, 0
     564:	8a e0       	ldi	r24, 0x0A	; 10
     566:	0e 94 7e 05 	call	0xafc	; 0xafc <DIO_SetPin>
     56a:	c1 fb       	bst	r28, 1
     56c:	66 27       	eor	r22, r22
     56e:	60 f9       	bld	r22, 0
     570:	89 e0       	ldi	r24, 0x09	; 9
     572:	0e 94 7e 05 	call	0xafc	; 0xafc <DIO_SetPin>
     576:	6c 2f       	mov	r22, r28
     578:	61 70       	andi	r22, 0x01	; 1
     57a:	88 e0       	ldi	r24, 0x08	; 8
     57c:	0e 94 7e 05 	call	0xafc	; 0xafc <DIO_SetPin>
     580:	61 e0       	ldi	r22, 0x01	; 1
     582:	82 e0       	ldi	r24, 0x02	; 2
     584:	0e 94 7e 05 	call	0xafc	; 0xafc <DIO_SetPin>
     588:	8f ec       	ldi	r24, 0xCF	; 207
     58a:	97 e0       	ldi	r25, 0x07	; 7
     58c:	01 97       	sbiw	r24, 0x01	; 1
     58e:	f1 f7       	brne	.-4      	; 0x58c <LCD_Instruction+0xa0>
     590:	00 c0       	rjmp	.+0      	; 0x592 <LCD_Instruction+0xa6>
     592:	00 00       	nop
     594:	60 e0       	ldi	r22, 0x00	; 0
     596:	82 e0       	ldi	r24, 0x02	; 2
     598:	0e 94 7e 05 	call	0xafc	; 0xafc <DIO_SetPin>
     59c:	8f ec       	ldi	r24, 0xCF	; 207
     59e:	97 e0       	ldi	r25, 0x07	; 7
     5a0:	01 97       	sbiw	r24, 0x01	; 1
     5a2:	f1 f7       	brne	.-4      	; 0x5a0 <LCD_Instruction+0xb4>
     5a4:	00 c0       	rjmp	.+0      	; 0x5a6 <LCD_Instruction+0xba>
     5a6:	00 00       	nop
     5a8:	cf 91       	pop	r28
     5aa:	08 95       	ret

000005ac <LCD_WriteData>:
     5ac:	cf 93       	push	r28
     5ae:	c8 2f       	mov	r28, r24
     5b0:	61 e0       	ldi	r22, 0x01	; 1
     5b2:	83 e0       	ldi	r24, 0x03	; 3
     5b4:	0e 94 7e 05 	call	0xafc	; 0xafc <DIO_SetPin>
     5b8:	6c 2f       	mov	r22, r28
     5ba:	66 1f       	adc	r22, r22
     5bc:	66 27       	eor	r22, r22
     5be:	66 1f       	adc	r22, r22
     5c0:	8c e0       	ldi	r24, 0x0C	; 12
     5c2:	0e 94 7e 05 	call	0xafc	; 0xafc <DIO_SetPin>
     5c6:	c6 fb       	bst	r28, 6
     5c8:	66 27       	eor	r22, r22
     5ca:	60 f9       	bld	r22, 0
     5cc:	8a e0       	ldi	r24, 0x0A	; 10
     5ce:	0e 94 7e 05 	call	0xafc	; 0xafc <DIO_SetPin>
     5d2:	c5 fb       	bst	r28, 5
     5d4:	66 27       	eor	r22, r22
     5d6:	60 f9       	bld	r22, 0
     5d8:	89 e0       	ldi	r24, 0x09	; 9
     5da:	0e 94 7e 05 	call	0xafc	; 0xafc <DIO_SetPin>
     5de:	c4 fb       	bst	r28, 4
     5e0:	66 27       	eor	r22, r22
     5e2:	60 f9       	bld	r22, 0
     5e4:	88 e0       	ldi	r24, 0x08	; 8
     5e6:	0e 94 7e 05 	call	0xafc	; 0xafc <DIO_SetPin>
     5ea:	61 e0       	ldi	r22, 0x01	; 1
     5ec:	82 e0       	ldi	r24, 0x02	; 2
     5ee:	0e 94 7e 05 	call	0xafc	; 0xafc <DIO_SetPin>
     5f2:	8f ec       	ldi	r24, 0xCF	; 207
     5f4:	97 e0       	ldi	r25, 0x07	; 7
     5f6:	01 97       	sbiw	r24, 0x01	; 1
     5f8:	f1 f7       	brne	.-4      	; 0x5f6 <LCD_WriteData+0x4a>
     5fa:	00 c0       	rjmp	.+0      	; 0x5fc <LCD_WriteData+0x50>
     5fc:	00 00       	nop
     5fe:	60 e0       	ldi	r22, 0x00	; 0
     600:	82 e0       	ldi	r24, 0x02	; 2
     602:	0e 94 7e 05 	call	0xafc	; 0xafc <DIO_SetPin>
     606:	8f ec       	ldi	r24, 0xCF	; 207
     608:	97 e0       	ldi	r25, 0x07	; 7
     60a:	01 97       	sbiw	r24, 0x01	; 1
     60c:	f1 f7       	brne	.-4      	; 0x60a <LCD_WriteData+0x5e>
     60e:	00 c0       	rjmp	.+0      	; 0x610 <LCD_WriteData+0x64>
     610:	00 00       	nop
     612:	c3 fb       	bst	r28, 3
     614:	66 27       	eor	r22, r22
     616:	60 f9       	bld	r22, 0
     618:	8c e0       	ldi	r24, 0x0C	; 12
     61a:	0e 94 7e 05 	call	0xafc	; 0xafc <DIO_SetPin>
     61e:	c2 fb       	bst	r28, 2
     620:	66 27       	eor	r22, r22
     622:	60 f9       	bld	r22, 0
     624:	8a e0       	ldi	r24, 0x0A	; 10
     626:	0e 94 7e 05 	call	0xafc	; 0xafc <DIO_SetPin>
     62a:	c1 fb       	bst	r28, 1
     62c:	66 27       	eor	r22, r22
     62e:	60 f9       	bld	r22, 0
     630:	89 e0       	ldi	r24, 0x09	; 9
     632:	0e 94 7e 05 	call	0xafc	; 0xafc <DIO_SetPin>
     636:	6c 2f       	mov	r22, r28
     638:	61 70       	andi	r22, 0x01	; 1
     63a:	88 e0       	ldi	r24, 0x08	; 8
     63c:	0e 94 7e 05 	call	0xafc	; 0xafc <DIO_SetPin>
     640:	61 e0       	ldi	r22, 0x01	; 1
     642:	82 e0       	ldi	r24, 0x02	; 2
     644:	0e 94 7e 05 	call	0xafc	; 0xafc <DIO_SetPin>
     648:	8f ec       	ldi	r24, 0xCF	; 207
     64a:	97 e0       	ldi	r25, 0x07	; 7
     64c:	01 97       	sbiw	r24, 0x01	; 1
     64e:	f1 f7       	brne	.-4      	; 0x64c <LCD_WriteData+0xa0>
     650:	00 c0       	rjmp	.+0      	; 0x652 <LCD_WriteData+0xa6>
     652:	00 00       	nop
     654:	60 e0       	ldi	r22, 0x00	; 0
     656:	82 e0       	ldi	r24, 0x02	; 2
     658:	0e 94 7e 05 	call	0xafc	; 0xafc <DIO_SetPin>
     65c:	8f ec       	ldi	r24, 0xCF	; 207
     65e:	97 e0       	ldi	r25, 0x07	; 7
     660:	01 97       	sbiw	r24, 0x01	; 1
     662:	f1 f7       	brne	.-4      	; 0x660 <LCD_WriteData+0xb4>
     664:	00 c0       	rjmp	.+0      	; 0x666 <LCD_WriteData+0xba>
     666:	00 00       	nop
     668:	cf 91       	pop	r28
     66a:	08 95       	ret

0000066c <LCD_Init>:
     66c:	2f e7       	ldi	r18, 0x7F	; 127
     66e:	88 e3       	ldi	r24, 0x38	; 56
     670:	91 e0       	ldi	r25, 0x01	; 1
     672:	21 50       	subi	r18, 0x01	; 1
     674:	80 40       	sbci	r24, 0x00	; 0
     676:	90 40       	sbci	r25, 0x00	; 0
     678:	e1 f7       	brne	.-8      	; 0x672 <LCD_Init+0x6>
     67a:	00 c0       	rjmp	.+0      	; 0x67c <LCD_Init+0x10>
     67c:	00 00       	nop
     67e:	82 e0       	ldi	r24, 0x02	; 2
     680:	0e 94 76 02 	call	0x4ec	; 0x4ec <LCD_Instruction>
     684:	88 e2       	ldi	r24, 0x28	; 40
     686:	0e 94 76 02 	call	0x4ec	; 0x4ec <LCD_Instruction>
     68a:	8c e0       	ldi	r24, 0x0C	; 12
     68c:	0e 94 76 02 	call	0x4ec	; 0x4ec <LCD_Instruction>
     690:	81 e0       	ldi	r24, 0x01	; 1
     692:	0e 94 76 02 	call	0x4ec	; 0x4ec <LCD_Instruction>
     696:	8f ec       	ldi	r24, 0xCF	; 207
     698:	97 e0       	ldi	r25, 0x07	; 7
     69a:	01 97       	sbiw	r24, 0x01	; 1
     69c:	f1 f7       	brne	.-4      	; 0x69a <LCD_Init+0x2e>
     69e:	00 c0       	rjmp	.+0      	; 0x6a0 <LCD_Init+0x34>
     6a0:	00 00       	nop
     6a2:	86 e0       	ldi	r24, 0x06	; 6
     6a4:	0e 94 76 02 	call	0x4ec	; 0x4ec <LCD_Instruction>
     6a8:	08 95       	ret

000006aa <LCD_GoTo>:
     6aa:	81 30       	cpi	r24, 0x01	; 1
     6ac:	29 f4       	brne	.+10     	; 0x6b8 <LCD_GoTo+0xe>
     6ae:	80 e8       	ldi	r24, 0x80	; 128
     6b0:	86 0f       	add	r24, r22
     6b2:	0e 94 76 02 	call	0x4ec	; 0x4ec <LCD_Instruction>
     6b6:	08 95       	ret
     6b8:	82 30       	cpi	r24, 0x02	; 2
     6ba:	29 f4       	brne	.+10     	; 0x6c6 <LCD_GoTo+0x1c>
     6bc:	80 ec       	ldi	r24, 0xC0	; 192
     6be:	86 0f       	add	r24, r22
     6c0:	0e 94 76 02 	call	0x4ec	; 0x4ec <LCD_Instruction>
     6c4:	08 95       	ret
     6c6:	83 30       	cpi	r24, 0x03	; 3
     6c8:	29 f4       	brne	.+10     	; 0x6d4 <LCD_GoTo+0x2a>
     6ca:	84 e9       	ldi	r24, 0x94	; 148
     6cc:	86 0f       	add	r24, r22
     6ce:	0e 94 76 02 	call	0x4ec	; 0x4ec <LCD_Instruction>
     6d2:	08 95       	ret
     6d4:	84 30       	cpi	r24, 0x04	; 4
     6d6:	21 f4       	brne	.+8      	; 0x6e0 <LCD_GoTo+0x36>
     6d8:	84 ed       	ldi	r24, 0xD4	; 212
     6da:	86 0f       	add	r24, r22
     6dc:	0e 94 76 02 	call	0x4ec	; 0x4ec <LCD_Instruction>
     6e0:	08 95       	ret

000006e2 <LCD_WriteChar>:
     6e2:	0e 94 d6 02 	call	0x5ac	; 0x5ac <LCD_WriteData>
     6e6:	08 95       	ret

000006e8 <LCD_WriteString>:
     6e8:	0f 93       	push	r16
     6ea:	1f 93       	push	r17
     6ec:	cf 93       	push	r28
     6ee:	8c 01       	movw	r16, r24
     6f0:	c0 e0       	ldi	r28, 0x00	; 0
     6f2:	03 c0       	rjmp	.+6      	; 0x6fa <LCD_WriteString+0x12>
     6f4:	0e 94 d6 02 	call	0x5ac	; 0x5ac <LCD_WriteData>
     6f8:	cf 5f       	subi	r28, 0xFF	; 255
     6fa:	f8 01       	movw	r30, r16
     6fc:	ec 0f       	add	r30, r28
     6fe:	f1 1d       	adc	r31, r1
     700:	80 81       	ld	r24, Z
     702:	81 11       	cpse	r24, r1
     704:	f7 cf       	rjmp	.-18     	; 0x6f4 <LCD_WriteString+0xc>
     706:	cf 91       	pop	r28
     708:	1f 91       	pop	r17
     70a:	0f 91       	pop	r16
     70c:	08 95       	ret

0000070e <LCD_WriteHexU32>:
     70e:	ff 92       	push	r15
     710:	0f 93       	push	r16
     712:	1f 93       	push	r17
     714:	cf 93       	push	r28
     716:	df 93       	push	r29
     718:	cd b7       	in	r28, 0x3d	; 61
     71a:	de b7       	in	r29, 0x3e	; 62
     71c:	2b 97       	sbiw	r28, 0x0b	; 11
     71e:	0f b6       	in	r0, 0x3f	; 63
     720:	f8 94       	cli
     722:	de bf       	out	0x3e, r29	; 62
     724:	0f be       	out	0x3f, r0	; 63
     726:	cd bf       	out	0x3d, r28	; 61
     728:	ab 01       	movw	r20, r22
     72a:	bc 01       	movw	r22, r24
     72c:	1c 86       	std	Y+12, r1	; 0x0c
     72e:	00 e0       	ldi	r16, 0x00	; 0
     730:	1b e0       	ldi	r17, 0x0B	; 11
     732:	11 50       	subi	r17, 0x01	; 1
     734:	db 01       	movw	r26, r22
     736:	ca 01       	movw	r24, r20
     738:	8f 70       	andi	r24, 0x0F	; 15
     73a:	99 27       	eor	r25, r25
     73c:	aa 27       	eor	r26, r26
     73e:	bb 27       	eor	r27, r27
     740:	8a 30       	cpi	r24, 0x0A	; 10
     742:	91 05       	cpc	r25, r1
     744:	a1 05       	cpc	r26, r1
     746:	b1 05       	cpc	r27, r1
     748:	48 f0       	brcs	.+18     	; 0x75c <LCD_WriteHexU32+0x4e>
     74a:	e1 e0       	ldi	r30, 0x01	; 1
     74c:	f0 e0       	ldi	r31, 0x00	; 0
     74e:	ec 0f       	add	r30, r28
     750:	fd 1f       	adc	r31, r29
     752:	e1 0f       	add	r30, r17
     754:	f1 1d       	adc	r31, r1
     756:	89 5c       	subi	r24, 0xC9	; 201
     758:	80 83       	st	Z, r24
     75a:	08 c0       	rjmp	.+16     	; 0x76c <LCD_WriteHexU32+0x5e>
     75c:	e1 e0       	ldi	r30, 0x01	; 1
     75e:	f0 e0       	ldi	r31, 0x00	; 0
     760:	ec 0f       	add	r30, r28
     762:	fd 1f       	adc	r31, r29
     764:	e1 0f       	add	r30, r17
     766:	f1 1d       	adc	r31, r1
     768:	80 5d       	subi	r24, 0xD0	; 208
     76a:	80 83       	st	Z, r24
     76c:	68 94       	set
     76e:	13 f8       	bld	r1, 3
     770:	76 95       	lsr	r23
     772:	67 95       	ror	r22
     774:	57 95       	ror	r21
     776:	47 95       	ror	r20
     778:	16 94       	lsr	r1
     77a:	d1 f7       	brne	.-12     	; 0x770 <LCD_WriteHexU32+0x62>
     77c:	0f 5f       	subi	r16, 0xFF	; 255
     77e:	41 15       	cp	r20, r1
     780:	51 05       	cpc	r21, r1
     782:	61 05       	cpc	r22, r1
     784:	71 05       	cpc	r23, r1
     786:	49 f0       	breq	.+18     	; 0x79a <LCD_WriteHexU32+0x8c>
     788:	11 11       	cpse	r17, r1
     78a:	d3 cf       	rjmp	.-90     	; 0x732 <LCD_WriteHexU32+0x24>
     78c:	f1 2c       	mov	r15, r1
     78e:	06 c0       	rjmp	.+12     	; 0x79c <LCD_WriteHexU32+0x8e>
     790:	80 e3       	ldi	r24, 0x30	; 48
     792:	0e 94 d6 02 	call	0x5ac	; 0x5ac <LCD_WriteData>
     796:	f3 94       	inc	r15
     798:	01 c0       	rjmp	.+2      	; 0x79c <LCD_WriteHexU32+0x8e>
     79a:	f1 2c       	mov	r15, r1
     79c:	2f 2d       	mov	r18, r15
     79e:	30 e0       	ldi	r19, 0x00	; 0
     7a0:	88 e0       	ldi	r24, 0x08	; 8
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	80 1b       	sub	r24, r16
     7a6:	91 09       	sbc	r25, r1
     7a8:	28 17       	cp	r18, r24
     7aa:	39 07       	cpc	r19, r25
     7ac:	8c f3       	brlt	.-30     	; 0x790 <LCD_WriteHexU32+0x82>
     7ae:	0a c0       	rjmp	.+20     	; 0x7c4 <LCD_WriteHexU32+0xb6>
     7b0:	e1 e0       	ldi	r30, 0x01	; 1
     7b2:	f0 e0       	ldi	r31, 0x00	; 0
     7b4:	ec 0f       	add	r30, r28
     7b6:	fd 1f       	adc	r31, r29
     7b8:	e1 0f       	add	r30, r17
     7ba:	f1 1d       	adc	r31, r1
     7bc:	80 81       	ld	r24, Z
     7be:	0e 94 d6 02 	call	0x5ac	; 0x5ac <LCD_WriteData>
     7c2:	1f 5f       	subi	r17, 0xFF	; 255
     7c4:	1b 30       	cpi	r17, 0x0B	; 11
     7c6:	a0 f3       	brcs	.-24     	; 0x7b0 <LCD_WriteHexU32+0xa2>
     7c8:	2b 96       	adiw	r28, 0x0b	; 11
     7ca:	0f b6       	in	r0, 0x3f	; 63
     7cc:	f8 94       	cli
     7ce:	de bf       	out	0x3e, r29	; 62
     7d0:	0f be       	out	0x3f, r0	; 63
     7d2:	cd bf       	out	0x3d, r28	; 61
     7d4:	df 91       	pop	r29
     7d6:	cf 91       	pop	r28
     7d8:	1f 91       	pop	r17
     7da:	0f 91       	pop	r16
     7dc:	ff 90       	pop	r15
     7de:	08 95       	ret

000007e0 <LCD_Clear_Position>:

void LCD_Clear_Position(u8 line, u8 cell, u8 noCells)
{
     7e0:	cf 93       	push	r28
     7e2:	df 93       	push	r29
     7e4:	d4 2f       	mov	r29, r20
	LCD_GoTo(line,cell);
     7e6:	0e 94 55 03 	call	0x6aa	; 0x6aa <LCD_GoTo>
	for(u8 i=0; i<noCells; i++)
     7ea:	c0 e0       	ldi	r28, 0x00	; 0
     7ec:	04 c0       	rjmp	.+8      	; 0x7f6 <LCD_Clear_Position+0x16>
	{
		LCD_WriteChar(' ');
     7ee:	80 e2       	ldi	r24, 0x20	; 32
     7f0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <LCD_WriteChar>
}

void LCD_Clear_Position(u8 line, u8 cell, u8 noCells)
{
	LCD_GoTo(line,cell);
	for(u8 i=0; i<noCells; i++)
     7f4:	cf 5f       	subi	r28, 0xFF	; 255
     7f6:	cd 17       	cp	r28, r29
     7f8:	d0 f3       	brcs	.-12     	; 0x7ee <LCD_Clear_Position+0xe>
	{
		LCD_WriteChar(' ');
	}
}
     7fa:	df 91       	pop	r29
     7fc:	cf 91       	pop	r28
     7fe:	08 95       	ret

00000800 <main>:
//////////////////////////////////  Cyber Security Task /////////////////////////////////////////////////////////

volatile static u8 strg_tmp[8], encrpt[12];
int main()
{
	DIO_Init();
     800:	0e 94 6e 05 	call	0xadc	; 0xadc <DIO_Init>
	LCD_Init();
     804:	0e 94 36 03 	call	0x66c	; 0x66c <LCD_Init>
	UART_Init();
     808:	0e 94 ac 08 	call	0x1158	; 0x1158 <UART_Init>
	CS_Init();
     80c:	0e 94 68 00 	call	0xd0	; 0xd0 <CS_Init>
	//we are gonna init timer 1 only to use random number from timer 1
	Timer1_Init(TIMER1_NORMAL_MODE,TIMER1_SCALER_64);
     810:	63 e0       	ldi	r22, 0x03	; 3
     812:	80 e0       	ldi	r24, 0x00	; 0
     814:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <Timer1_Init>
	
	LCD_WriteString("MC Response: ");
     818:	81 e7       	ldi	r24, 0x71	; 113
     81a:	91 e0       	ldi	r25, 0x01	; 1
     81c:	0e 94 74 03 	call	0x6e8	; 0x6e8 <LCD_WriteString>
	LCD_GoTo(3,0);
     820:	60 e0       	ldi	r22, 0x00	; 0
     822:	83 e0       	ldi	r24, 0x03	; 3
     824:	0e 94 55 03 	call	0x6aa	; 0x6aa <LCD_GoTo>
	LCD_WriteString("MC Receive: ");
     828:	8f e7       	ldi	r24, 0x7F	; 127
     82a:	91 e0       	ldi	r25, 0x01	; 1
     82c:	0e 94 74 03 	call	0x6e8	; 0x6e8 <LCD_WriteString>
		//here we wait to receive the command to either:
		//1) turn on led
		//2) ask for security access
		while (1)
		{
			UART_ReceiveString(strg_tmp);
     830:	8a eb       	ldi	r24, 0xBA	; 186
     832:	91 e0       	ldi	r25, 0x01	; 1
     834:	0e 94 10 09 	call	0x1220	; 0x1220 <UART_ReceiveString>
			CS_ConvertString(strg_tmp);
     838:	8a eb       	ldi	r24, 0xBA	; 186
     83a:	91 e0       	ldi	r25, 0x01	; 1
     83c:	0e 94 c4 01 	call	0x388	; 0x388 <CS_ConvertString>
			CS_ReceiveCom();
     840:	0e 94 a2 00 	call	0x144	; 0x144 <CS_ReceiveCom>
			if( CS_getStatus() == CS_FALSE)
     844:	0e 94 73 02 	call	0x4e6	; 0x4e6 <CS_getStatus>
     848:	81 11       	cpse	r24, r1
     84a:	1a c0       	rjmp	.+52     	; 0x880 <__stack+0x21>
			{
				LCD_Clear_Position(4,0,19);
     84c:	43 e1       	ldi	r20, 0x13	; 19
     84e:	60 e0       	ldi	r22, 0x00	; 0
     850:	84 e0       	ldi	r24, 0x04	; 4
     852:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <LCD_Clear_Position>
				LCD_GoTo(4,0);
     856:	60 e0       	ldi	r22, 0x00	; 0
     858:	84 e0       	ldi	r24, 0x04	; 4
     85a:	0e 94 55 03 	call	0x6aa	; 0x6aa <LCD_GoTo>
				LCD_WriteString("Failed... Try again");
     85e:	8c e8       	ldi	r24, 0x8C	; 140
     860:	91 e0       	ldi	r25, 0x01	; 1
     862:	0e 94 74 03 	call	0x6e8	; 0x6e8 <LCD_WriteString>
			}
			else
				break;
		}
     866:	e4 cf       	rjmp	.-56     	; 0x830 <main+0x30>
		///////////////////////////////////////////////////
		while (CS_getStatus()==CS_REQUEST)
		{
			UART_ReceiveString(encrpt);
     868:	8e ea       	ldi	r24, 0xAE	; 174
     86a:	91 e0       	ldi	r25, 0x01	; 1
     86c:	0e 94 10 09 	call	0x1220	; 0x1220 <UART_ReceiveString>
			CS_ConvertString(encrpt);
     870:	8e ea       	ldi	r24, 0xAE	; 174
     872:	91 e0       	ldi	r25, 0x01	; 1
     874:	0e 94 c4 01 	call	0x388	; 0x388 <CS_ConvertString>
			if (CS_getAccess()==GRANTED)
     878:	0e 94 70 02 	call	0x4e0	; 0x4e0 <CS_getAccess>
     87c:	81 30       	cpi	r24, 0x01	; 1
     87e:	c1 f2       	breq	.-80     	; 0x830 <main+0x30>
			}
			else
				break;
		}
		///////////////////////////////////////////////////
		while (CS_getStatus()==CS_REQUEST)
     880:	0e 94 73 02 	call	0x4e6	; 0x4e6 <CS_getStatus>
     884:	82 30       	cpi	r24, 0x02	; 2
     886:	81 f3       	breq	.-32     	; 0x868 <__stack+0x9>
     888:	d3 cf       	rjmp	.-90     	; 0x830 <main+0x30>

0000088a <__vector_16>:
	ADC_Fptr=LocalPtr;
}


ISR (ADC_vect)
{
     88a:	1f 92       	push	r1
     88c:	0f 92       	push	r0
     88e:	0f b6       	in	r0, 0x3f	; 63
     890:	0f 92       	push	r0
     892:	11 24       	eor	r1, r1
     894:	2f 93       	push	r18
     896:	3f 93       	push	r19
     898:	4f 93       	push	r20
     89a:	5f 93       	push	r21
     89c:	6f 93       	push	r22
     89e:	7f 93       	push	r23
     8a0:	8f 93       	push	r24
     8a2:	9f 93       	push	r25
     8a4:	af 93       	push	r26
     8a6:	bf 93       	push	r27
     8a8:	ef 93       	push	r30
     8aa:	ff 93       	push	r31
	ADC_BusyFlag=0;
     8ac:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <ADC_BusyFlag>
	if (ADC_Fptr!=NULLPTR)
     8b0:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <ADC_Fptr>
     8b4:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <ADC_Fptr+0x1>
     8b8:	e2 30       	cpi	r30, 0x02	; 2
     8ba:	f1 05       	cpc	r31, r1
     8bc:	09 f0       	breq	.+2      	; 0x8c0 <__vector_16+0x36>
	{
		ADC_Fptr();
     8be:	09 95       	icall
	}
}
     8c0:	ff 91       	pop	r31
     8c2:	ef 91       	pop	r30
     8c4:	bf 91       	pop	r27
     8c6:	af 91       	pop	r26
     8c8:	9f 91       	pop	r25
     8ca:	8f 91       	pop	r24
     8cc:	7f 91       	pop	r23
     8ce:	6f 91       	pop	r22
     8d0:	5f 91       	pop	r21
     8d2:	4f 91       	pop	r20
     8d4:	3f 91       	pop	r19
     8d6:	2f 91       	pop	r18
     8d8:	0f 90       	pop	r0
     8da:	0f be       	out	0x3f, r0	; 63
     8dc:	0f 90       	pop	r0
     8de:	1f 90       	pop	r1
     8e0:	18 95       	reti

000008e2 <DIO_SetPinDirection>:
#include "../../CFG/DIO_CFG.h"


void DIO_SetPinDirection(DIO_Pin_Num PN,DIO_PinStatus_type status)
{
	u8 pinNUM = PN % 8;
     8e2:	98 2f       	mov	r25, r24
     8e4:	97 70       	andi	r25, 0x07	; 7
	DIO_Port_type portNUM = PN / 8;
     8e6:	86 95       	lsr	r24
     8e8:	86 95       	lsr	r24
     8ea:	86 95       	lsr	r24
	
	switch(status)
     8ec:	61 30       	cpi	r22, 0x01	; 1
     8ee:	09 f4       	brne	.+2      	; 0x8f2 <DIO_SetPinDirection+0x10>
     8f0:	55 c0       	rjmp	.+170    	; 0x99c <DIO_SetPinDirection+0xba>
     8f2:	20 f0       	brcs	.+8      	; 0x8fc <DIO_SetPinDirection+0x1a>
     8f4:	62 30       	cpi	r22, 0x02	; 2
     8f6:	09 f4       	brne	.+2      	; 0x8fa <DIO_SetPinDirection+0x18>
     8f8:	a1 c0       	rjmp	.+322    	; 0xa3c <DIO_SetPinDirection+0x15a>
     8fa:	08 95       	ret
	{
		case OUTPUT:
		switch(portNUM)
     8fc:	81 30       	cpi	r24, 0x01	; 1
     8fe:	c1 f0       	breq	.+48     	; 0x930 <DIO_SetPinDirection+0x4e>
     900:	28 f0       	brcs	.+10     	; 0x90c <DIO_SetPinDirection+0x2a>
     902:	82 30       	cpi	r24, 0x02	; 2
     904:	39 f1       	breq	.+78     	; 0x954 <DIO_SetPinDirection+0x72>
     906:	83 30       	cpi	r24, 0x03	; 3
     908:	b9 f1       	breq	.+110    	; 0x978 <DIO_SetPinDirection+0x96>
     90a:	08 95       	ret
		{
			case PA:
			SET_BIT(DDRA,pinNUM);
     90c:	4a b3       	in	r20, 0x1a	; 26
     90e:	21 e0       	ldi	r18, 0x01	; 1
     910:	30 e0       	ldi	r19, 0x00	; 0
     912:	b9 01       	movw	r22, r18
     914:	02 c0       	rjmp	.+4      	; 0x91a <DIO_SetPinDirection+0x38>
     916:	66 0f       	add	r22, r22
     918:	77 1f       	adc	r23, r23
     91a:	9a 95       	dec	r25
     91c:	e2 f7       	brpl	.-8      	; 0x916 <DIO_SetPinDirection+0x34>
     91e:	cb 01       	movw	r24, r22
     920:	94 2f       	mov	r25, r20
     922:	98 2b       	or	r25, r24
     924:	9a bb       	out	0x1a, r25	; 26
			CLR_BIT(PORTA,pinNUM);
     926:	9b b3       	in	r25, 0x1b	; 27
     928:	80 95       	com	r24
     92a:	89 23       	and	r24, r25
     92c:	8b bb       	out	0x1b, r24	; 27
			break;
     92e:	08 95       	ret
			case PB:
			SET_BIT(DDRB,pinNUM);
     930:	47 b3       	in	r20, 0x17	; 23
     932:	21 e0       	ldi	r18, 0x01	; 1
     934:	30 e0       	ldi	r19, 0x00	; 0
     936:	b9 01       	movw	r22, r18
     938:	02 c0       	rjmp	.+4      	; 0x93e <DIO_SetPinDirection+0x5c>
     93a:	66 0f       	add	r22, r22
     93c:	77 1f       	adc	r23, r23
     93e:	9a 95       	dec	r25
     940:	e2 f7       	brpl	.-8      	; 0x93a <DIO_SetPinDirection+0x58>
     942:	cb 01       	movw	r24, r22
     944:	94 2f       	mov	r25, r20
     946:	98 2b       	or	r25, r24
     948:	97 bb       	out	0x17, r25	; 23
			CLR_BIT(PORTB,pinNUM);
     94a:	98 b3       	in	r25, 0x18	; 24
     94c:	80 95       	com	r24
     94e:	89 23       	and	r24, r25
     950:	88 bb       	out	0x18, r24	; 24
			break;
     952:	08 95       	ret
			case PC:
			SET_BIT(DDRC,pinNUM);
     954:	44 b3       	in	r20, 0x14	; 20
     956:	21 e0       	ldi	r18, 0x01	; 1
     958:	30 e0       	ldi	r19, 0x00	; 0
     95a:	b9 01       	movw	r22, r18
     95c:	02 c0       	rjmp	.+4      	; 0x962 <DIO_SetPinDirection+0x80>
     95e:	66 0f       	add	r22, r22
     960:	77 1f       	adc	r23, r23
     962:	9a 95       	dec	r25
     964:	e2 f7       	brpl	.-8      	; 0x95e <DIO_SetPinDirection+0x7c>
     966:	cb 01       	movw	r24, r22
     968:	94 2f       	mov	r25, r20
     96a:	98 2b       	or	r25, r24
     96c:	94 bb       	out	0x14, r25	; 20
			CLR_BIT(PORTC,pinNUM);
     96e:	95 b3       	in	r25, 0x15	; 21
     970:	80 95       	com	r24
     972:	89 23       	and	r24, r25
     974:	85 bb       	out	0x15, r24	; 21
			break;
     976:	08 95       	ret
			case PD:
			SET_BIT(DDRD,pinNUM);
     978:	41 b3       	in	r20, 0x11	; 17
     97a:	21 e0       	ldi	r18, 0x01	; 1
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	b9 01       	movw	r22, r18
     980:	02 c0       	rjmp	.+4      	; 0x986 <DIO_SetPinDirection+0xa4>
     982:	66 0f       	add	r22, r22
     984:	77 1f       	adc	r23, r23
     986:	9a 95       	dec	r25
     988:	e2 f7       	brpl	.-8      	; 0x982 <DIO_SetPinDirection+0xa0>
     98a:	cb 01       	movw	r24, r22
     98c:	94 2f       	mov	r25, r20
     98e:	98 2b       	or	r25, r24
     990:	91 bb       	out	0x11, r25	; 17
			CLR_BIT(PORTD,pinNUM);
     992:	92 b3       	in	r25, 0x12	; 18
     994:	80 95       	com	r24
     996:	89 23       	and	r24, r25
     998:	82 bb       	out	0x12, r24	; 18
			break;
     99a:	08 95       	ret
		}
		break;
		case INFREE:
		switch(portNUM)
     99c:	81 30       	cpi	r24, 0x01	; 1
     99e:	c1 f0       	breq	.+48     	; 0x9d0 <DIO_SetPinDirection+0xee>
     9a0:	28 f0       	brcs	.+10     	; 0x9ac <DIO_SetPinDirection+0xca>
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	39 f1       	breq	.+78     	; 0x9f4 <DIO_SetPinDirection+0x112>
     9a6:	83 30       	cpi	r24, 0x03	; 3
     9a8:	b9 f1       	breq	.+110    	; 0xa18 <DIO_SetPinDirection+0x136>
     9aa:	08 95       	ret
		{
			case PA:
			CLR_BIT(DDRA,pinNUM);
     9ac:	4a b3       	in	r20, 0x1a	; 26
     9ae:	21 e0       	ldi	r18, 0x01	; 1
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	b9 01       	movw	r22, r18
     9b4:	02 c0       	rjmp	.+4      	; 0x9ba <DIO_SetPinDirection+0xd8>
     9b6:	66 0f       	add	r22, r22
     9b8:	77 1f       	adc	r23, r23
     9ba:	9a 95       	dec	r25
     9bc:	e2 f7       	brpl	.-8      	; 0x9b6 <DIO_SetPinDirection+0xd4>
     9be:	cb 01       	movw	r24, r22
     9c0:	80 95       	com	r24
     9c2:	94 2f       	mov	r25, r20
     9c4:	98 23       	and	r25, r24
     9c6:	9a bb       	out	0x1a, r25	; 26
			CLR_BIT(PORTA,pinNUM);
     9c8:	9b b3       	in	r25, 0x1b	; 27
     9ca:	89 23       	and	r24, r25
     9cc:	8b bb       	out	0x1b, r24	; 27
			break;
     9ce:	08 95       	ret
			case PB:
			CLR_BIT(DDRB,pinNUM);
     9d0:	47 b3       	in	r20, 0x17	; 23
     9d2:	21 e0       	ldi	r18, 0x01	; 1
     9d4:	30 e0       	ldi	r19, 0x00	; 0
     9d6:	b9 01       	movw	r22, r18
     9d8:	02 c0       	rjmp	.+4      	; 0x9de <DIO_SetPinDirection+0xfc>
     9da:	66 0f       	add	r22, r22
     9dc:	77 1f       	adc	r23, r23
     9de:	9a 95       	dec	r25
     9e0:	e2 f7       	brpl	.-8      	; 0x9da <DIO_SetPinDirection+0xf8>
     9e2:	cb 01       	movw	r24, r22
     9e4:	80 95       	com	r24
     9e6:	94 2f       	mov	r25, r20
     9e8:	98 23       	and	r25, r24
     9ea:	97 bb       	out	0x17, r25	; 23
			CLR_BIT(PORTB,pinNUM);
     9ec:	98 b3       	in	r25, 0x18	; 24
     9ee:	89 23       	and	r24, r25
     9f0:	88 bb       	out	0x18, r24	; 24
			break;
     9f2:	08 95       	ret
			case PC:
			CLR_BIT(DDRC,pinNUM);
     9f4:	44 b3       	in	r20, 0x14	; 20
     9f6:	21 e0       	ldi	r18, 0x01	; 1
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	b9 01       	movw	r22, r18
     9fc:	02 c0       	rjmp	.+4      	; 0xa02 <DIO_SetPinDirection+0x120>
     9fe:	66 0f       	add	r22, r22
     a00:	77 1f       	adc	r23, r23
     a02:	9a 95       	dec	r25
     a04:	e2 f7       	brpl	.-8      	; 0x9fe <DIO_SetPinDirection+0x11c>
     a06:	cb 01       	movw	r24, r22
     a08:	80 95       	com	r24
     a0a:	94 2f       	mov	r25, r20
     a0c:	98 23       	and	r25, r24
     a0e:	94 bb       	out	0x14, r25	; 20
			CLR_BIT(PORTC,pinNUM);
     a10:	95 b3       	in	r25, 0x15	; 21
     a12:	89 23       	and	r24, r25
     a14:	85 bb       	out	0x15, r24	; 21
			break;
     a16:	08 95       	ret
			case PD:
			CLR_BIT(DDRD,pinNUM);
     a18:	41 b3       	in	r20, 0x11	; 17
     a1a:	21 e0       	ldi	r18, 0x01	; 1
     a1c:	30 e0       	ldi	r19, 0x00	; 0
     a1e:	b9 01       	movw	r22, r18
     a20:	02 c0       	rjmp	.+4      	; 0xa26 <DIO_SetPinDirection+0x144>
     a22:	66 0f       	add	r22, r22
     a24:	77 1f       	adc	r23, r23
     a26:	9a 95       	dec	r25
     a28:	e2 f7       	brpl	.-8      	; 0xa22 <DIO_SetPinDirection+0x140>
     a2a:	cb 01       	movw	r24, r22
     a2c:	80 95       	com	r24
     a2e:	94 2f       	mov	r25, r20
     a30:	98 23       	and	r25, r24
     a32:	91 bb       	out	0x11, r25	; 17
			CLR_BIT(PORTD,pinNUM);
     a34:	92 b3       	in	r25, 0x12	; 18
     a36:	89 23       	and	r24, r25
     a38:	82 bb       	out	0x12, r24	; 18
			break;
     a3a:	08 95       	ret
		}
		break;
		case INPULL:
		switch(portNUM)
     a3c:	81 30       	cpi	r24, 0x01	; 1
     a3e:	c1 f0       	breq	.+48     	; 0xa70 <DIO_SetPinDirection+0x18e>
     a40:	28 f0       	brcs	.+10     	; 0xa4c <DIO_SetPinDirection+0x16a>
     a42:	82 30       	cpi	r24, 0x02	; 2
     a44:	39 f1       	breq	.+78     	; 0xa94 <DIO_SetPinDirection+0x1b2>
     a46:	83 30       	cpi	r24, 0x03	; 3
     a48:	b9 f1       	breq	.+110    	; 0xab8 <DIO_SetPinDirection+0x1d6>
     a4a:	08 95       	ret
		{
			case PA:
			CLR_BIT(DDRA,pinNUM);
     a4c:	4a b3       	in	r20, 0x1a	; 26
     a4e:	21 e0       	ldi	r18, 0x01	; 1
     a50:	30 e0       	ldi	r19, 0x00	; 0
     a52:	b9 01       	movw	r22, r18
     a54:	02 c0       	rjmp	.+4      	; 0xa5a <DIO_SetPinDirection+0x178>
     a56:	66 0f       	add	r22, r22
     a58:	77 1f       	adc	r23, r23
     a5a:	9a 95       	dec	r25
     a5c:	e2 f7       	brpl	.-8      	; 0xa56 <DIO_SetPinDirection+0x174>
     a5e:	cb 01       	movw	r24, r22
     a60:	96 2f       	mov	r25, r22
     a62:	90 95       	com	r25
     a64:	94 23       	and	r25, r20
     a66:	9a bb       	out	0x1a, r25	; 26
			SET_BIT(PORTA,pinNUM);
     a68:	9b b3       	in	r25, 0x1b	; 27
     a6a:	89 2b       	or	r24, r25
     a6c:	8b bb       	out	0x1b, r24	; 27
			break;
     a6e:	08 95       	ret
			case PB:
			CLR_BIT(DDRB,pinNUM);
     a70:	47 b3       	in	r20, 0x17	; 23
     a72:	21 e0       	ldi	r18, 0x01	; 1
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	b9 01       	movw	r22, r18
     a78:	02 c0       	rjmp	.+4      	; 0xa7e <DIO_SetPinDirection+0x19c>
     a7a:	66 0f       	add	r22, r22
     a7c:	77 1f       	adc	r23, r23
     a7e:	9a 95       	dec	r25
     a80:	e2 f7       	brpl	.-8      	; 0xa7a <DIO_SetPinDirection+0x198>
     a82:	cb 01       	movw	r24, r22
     a84:	96 2f       	mov	r25, r22
     a86:	90 95       	com	r25
     a88:	94 23       	and	r25, r20
     a8a:	97 bb       	out	0x17, r25	; 23
			SET_BIT(PORTB,pinNUM);
     a8c:	98 b3       	in	r25, 0x18	; 24
     a8e:	89 2b       	or	r24, r25
     a90:	88 bb       	out	0x18, r24	; 24
			break;
     a92:	08 95       	ret
			case PC:
			CLR_BIT(DDRC,pinNUM);
     a94:	44 b3       	in	r20, 0x14	; 20
     a96:	21 e0       	ldi	r18, 0x01	; 1
     a98:	30 e0       	ldi	r19, 0x00	; 0
     a9a:	b9 01       	movw	r22, r18
     a9c:	02 c0       	rjmp	.+4      	; 0xaa2 <DIO_SetPinDirection+0x1c0>
     a9e:	66 0f       	add	r22, r22
     aa0:	77 1f       	adc	r23, r23
     aa2:	9a 95       	dec	r25
     aa4:	e2 f7       	brpl	.-8      	; 0xa9e <DIO_SetPinDirection+0x1bc>
     aa6:	cb 01       	movw	r24, r22
     aa8:	96 2f       	mov	r25, r22
     aaa:	90 95       	com	r25
     aac:	94 23       	and	r25, r20
     aae:	94 bb       	out	0x14, r25	; 20
			SET_BIT(PORTC,pinNUM);
     ab0:	95 b3       	in	r25, 0x15	; 21
     ab2:	89 2b       	or	r24, r25
     ab4:	85 bb       	out	0x15, r24	; 21
			break;
     ab6:	08 95       	ret
			case PD:
			CLR_BIT(DDRD,pinNUM);
     ab8:	41 b3       	in	r20, 0x11	; 17
     aba:	21 e0       	ldi	r18, 0x01	; 1
     abc:	30 e0       	ldi	r19, 0x00	; 0
     abe:	b9 01       	movw	r22, r18
     ac0:	02 c0       	rjmp	.+4      	; 0xac6 <DIO_SetPinDirection+0x1e4>
     ac2:	66 0f       	add	r22, r22
     ac4:	77 1f       	adc	r23, r23
     ac6:	9a 95       	dec	r25
     ac8:	e2 f7       	brpl	.-8      	; 0xac2 <DIO_SetPinDirection+0x1e0>
     aca:	cb 01       	movw	r24, r22
     acc:	96 2f       	mov	r25, r22
     ace:	90 95       	com	r25
     ad0:	94 23       	and	r25, r20
     ad2:	91 bb       	out	0x11, r25	; 17
			SET_BIT(PORTD,pinNUM);
     ad4:	92 b3       	in	r25, 0x12	; 18
     ad6:	89 2b       	or	r24, r25
     ad8:	82 bb       	out	0x12, r24	; 18
     ada:	08 95       	ret

00000adc <DIO_Init>:
		break;
	}
}

void DIO_Init()
{
     adc:	cf 93       	push	r28
	for (DIO_Pin_Num i=0;i<TOTAL_PINS;i++)
     ade:	c0 e0       	ldi	r28, 0x00	; 0
     ae0:	09 c0       	rjmp	.+18     	; 0xaf4 <DIO_Init+0x18>
		DIO_SetPinDirection(i,DIO_PinsStatusArr[i]);
     ae2:	ec 2f       	mov	r30, r28
     ae4:	f0 e0       	ldi	r31, 0x00	; 0
     ae6:	ef 5a       	subi	r30, 0xAF	; 175
     ae8:	fe 4f       	sbci	r31, 0xFE	; 254
     aea:	60 81       	ld	r22, Z
     aec:	8c 2f       	mov	r24, r28
     aee:	0e 94 71 04 	call	0x8e2	; 0x8e2 <DIO_SetPinDirection>
	}
}

void DIO_Init()
{
	for (DIO_Pin_Num i=0;i<TOTAL_PINS;i++)
     af2:	cf 5f       	subi	r28, 0xFF	; 255
     af4:	c0 32       	cpi	r28, 0x20	; 32
     af6:	a8 f3       	brcs	.-22     	; 0xae2 <DIO_Init+0x6>
		DIO_SetPinDirection(i,DIO_PinsStatusArr[i]);
}
     af8:	cf 91       	pop	r28
     afa:	08 95       	ret

00000afc <DIO_SetPin>:


void DIO_SetPin(DIO_Pin_Num PN, DIO_PIN_VOLT volt)
{
	u8 pinNUM = PN % 8;
     afc:	98 2f       	mov	r25, r24
     afe:	97 70       	andi	r25, 0x07	; 7
	DIO_Port_type portNUM = PN / 8;
     b00:	86 95       	lsr	r24
     b02:	86 95       	lsr	r24
     b04:	86 95       	lsr	r24
	switch(portNUM)
     b06:	81 30       	cpi	r24, 0x01	; 1
     b08:	91 f1       	breq	.+100    	; 0xb6e <DIO_SetPin+0x72>
     b0a:	38 f0       	brcs	.+14     	; 0xb1a <DIO_SetPin+0x1e>
     b0c:	82 30       	cpi	r24, 0x02	; 2
     b0e:	09 f4       	brne	.+2      	; 0xb12 <DIO_SetPin+0x16>
     b10:	58 c0       	rjmp	.+176    	; 0xbc2 <DIO_SetPin+0xc6>
     b12:	83 30       	cpi	r24, 0x03	; 3
     b14:	09 f4       	brne	.+2      	; 0xb18 <DIO_SetPin+0x1c>
     b16:	7f c0       	rjmp	.+254    	; 0xc16 <DIO_SetPin+0x11a>
     b18:	08 95       	ret
	{
		case PA:
		if(READ_BIT(DDRA,pinNUM))
     b1a:	2a b3       	in	r18, 0x1a	; 26
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	09 2e       	mov	r0, r25
     b20:	02 c0       	rjmp	.+4      	; 0xb26 <DIO_SetPin+0x2a>
     b22:	35 95       	asr	r19
     b24:	27 95       	ror	r18
     b26:	0a 94       	dec	r0
     b28:	e2 f7       	brpl	.-8      	; 0xb22 <DIO_SetPin+0x26>
     b2a:	20 ff       	sbrs	r18, 0
     b2c:	9d c0       	rjmp	.+314    	; 0xc68 <DIO_SetPin+0x16c>
		{
			switch(volt)
     b2e:	66 23       	and	r22, r22
     b30:	19 f0       	breq	.+6      	; 0xb38 <DIO_SetPin+0x3c>
     b32:	61 30       	cpi	r22, 0x01	; 1
     b34:	79 f0       	breq	.+30     	; 0xb54 <DIO_SetPin+0x58>
     b36:	08 95       	ret
			{
				case LOW:
				CLR_BIT(PORTA,pinNUM);
     b38:	4b b3       	in	r20, 0x1b	; 27
     b3a:	21 e0       	ldi	r18, 0x01	; 1
     b3c:	30 e0       	ldi	r19, 0x00	; 0
     b3e:	b9 01       	movw	r22, r18
     b40:	02 c0       	rjmp	.+4      	; 0xb46 <DIO_SetPin+0x4a>
     b42:	66 0f       	add	r22, r22
     b44:	77 1f       	adc	r23, r23
     b46:	9a 95       	dec	r25
     b48:	e2 f7       	brpl	.-8      	; 0xb42 <DIO_SetPin+0x46>
     b4a:	cb 01       	movw	r24, r22
     b4c:	80 95       	com	r24
     b4e:	84 23       	and	r24, r20
     b50:	8b bb       	out	0x1b, r24	; 27
				break;
     b52:	08 95       	ret
				case HIGH:
				SET_BIT(PORTA,pinNUM);
     b54:	4b b3       	in	r20, 0x1b	; 27
     b56:	21 e0       	ldi	r18, 0x01	; 1
     b58:	30 e0       	ldi	r19, 0x00	; 0
     b5a:	b9 01       	movw	r22, r18
     b5c:	02 c0       	rjmp	.+4      	; 0xb62 <DIO_SetPin+0x66>
     b5e:	66 0f       	add	r22, r22
     b60:	77 1f       	adc	r23, r23
     b62:	9a 95       	dec	r25
     b64:	e2 f7       	brpl	.-8      	; 0xb5e <DIO_SetPin+0x62>
     b66:	cb 01       	movw	r24, r22
     b68:	84 2b       	or	r24, r20
     b6a:	8b bb       	out	0x1b, r24	; 27
				break;
     b6c:	08 95       	ret
			}
		}
		break;
		case PB:
		if(READ_BIT(DDRB,pinNUM))
     b6e:	27 b3       	in	r18, 0x17	; 23
     b70:	30 e0       	ldi	r19, 0x00	; 0
     b72:	09 2e       	mov	r0, r25
     b74:	02 c0       	rjmp	.+4      	; 0xb7a <DIO_SetPin+0x7e>
     b76:	35 95       	asr	r19
     b78:	27 95       	ror	r18
     b7a:	0a 94       	dec	r0
     b7c:	e2 f7       	brpl	.-8      	; 0xb76 <DIO_SetPin+0x7a>
     b7e:	20 ff       	sbrs	r18, 0
     b80:	73 c0       	rjmp	.+230    	; 0xc68 <DIO_SetPin+0x16c>
		{
			switch(volt)
     b82:	66 23       	and	r22, r22
     b84:	19 f0       	breq	.+6      	; 0xb8c <DIO_SetPin+0x90>
     b86:	61 30       	cpi	r22, 0x01	; 1
     b88:	79 f0       	breq	.+30     	; 0xba8 <DIO_SetPin+0xac>
     b8a:	08 95       	ret
			{
				case LOW:
				CLR_BIT(PORTB,pinNUM);
     b8c:	48 b3       	in	r20, 0x18	; 24
     b8e:	21 e0       	ldi	r18, 0x01	; 1
     b90:	30 e0       	ldi	r19, 0x00	; 0
     b92:	b9 01       	movw	r22, r18
     b94:	02 c0       	rjmp	.+4      	; 0xb9a <DIO_SetPin+0x9e>
     b96:	66 0f       	add	r22, r22
     b98:	77 1f       	adc	r23, r23
     b9a:	9a 95       	dec	r25
     b9c:	e2 f7       	brpl	.-8      	; 0xb96 <DIO_SetPin+0x9a>
     b9e:	cb 01       	movw	r24, r22
     ba0:	80 95       	com	r24
     ba2:	84 23       	and	r24, r20
     ba4:	88 bb       	out	0x18, r24	; 24
				break;
     ba6:	08 95       	ret
				case HIGH:
				SET_BIT(PORTB,pinNUM);
     ba8:	48 b3       	in	r20, 0x18	; 24
     baa:	21 e0       	ldi	r18, 0x01	; 1
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	b9 01       	movw	r22, r18
     bb0:	02 c0       	rjmp	.+4      	; 0xbb6 <DIO_SetPin+0xba>
     bb2:	66 0f       	add	r22, r22
     bb4:	77 1f       	adc	r23, r23
     bb6:	9a 95       	dec	r25
     bb8:	e2 f7       	brpl	.-8      	; 0xbb2 <DIO_SetPin+0xb6>
     bba:	cb 01       	movw	r24, r22
     bbc:	84 2b       	or	r24, r20
     bbe:	88 bb       	out	0x18, r24	; 24
				break;
     bc0:	08 95       	ret
			}
		}
		break;
		case PC:
		if(READ_BIT(DDRC,pinNUM))
     bc2:	24 b3       	in	r18, 0x14	; 20
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	09 2e       	mov	r0, r25
     bc8:	02 c0       	rjmp	.+4      	; 0xbce <DIO_SetPin+0xd2>
     bca:	35 95       	asr	r19
     bcc:	27 95       	ror	r18
     bce:	0a 94       	dec	r0
     bd0:	e2 f7       	brpl	.-8      	; 0xbca <DIO_SetPin+0xce>
     bd2:	20 ff       	sbrs	r18, 0
     bd4:	49 c0       	rjmp	.+146    	; 0xc68 <DIO_SetPin+0x16c>
		{
			switch(volt)
     bd6:	66 23       	and	r22, r22
     bd8:	19 f0       	breq	.+6      	; 0xbe0 <DIO_SetPin+0xe4>
     bda:	61 30       	cpi	r22, 0x01	; 1
     bdc:	79 f0       	breq	.+30     	; 0xbfc <DIO_SetPin+0x100>
     bde:	08 95       	ret
			{
				case LOW:
				CLR_BIT(PORTC,pinNUM);
     be0:	45 b3       	in	r20, 0x15	; 21
     be2:	21 e0       	ldi	r18, 0x01	; 1
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	b9 01       	movw	r22, r18
     be8:	02 c0       	rjmp	.+4      	; 0xbee <DIO_SetPin+0xf2>
     bea:	66 0f       	add	r22, r22
     bec:	77 1f       	adc	r23, r23
     bee:	9a 95       	dec	r25
     bf0:	e2 f7       	brpl	.-8      	; 0xbea <DIO_SetPin+0xee>
     bf2:	cb 01       	movw	r24, r22
     bf4:	80 95       	com	r24
     bf6:	84 23       	and	r24, r20
     bf8:	85 bb       	out	0x15, r24	; 21
				break;
     bfa:	08 95       	ret
				case HIGH:
				SET_BIT(PORTC,pinNUM);
     bfc:	45 b3       	in	r20, 0x15	; 21
     bfe:	21 e0       	ldi	r18, 0x01	; 1
     c00:	30 e0       	ldi	r19, 0x00	; 0
     c02:	b9 01       	movw	r22, r18
     c04:	02 c0       	rjmp	.+4      	; 0xc0a <DIO_SetPin+0x10e>
     c06:	66 0f       	add	r22, r22
     c08:	77 1f       	adc	r23, r23
     c0a:	9a 95       	dec	r25
     c0c:	e2 f7       	brpl	.-8      	; 0xc06 <DIO_SetPin+0x10a>
     c0e:	cb 01       	movw	r24, r22
     c10:	84 2b       	or	r24, r20
     c12:	85 bb       	out	0x15, r24	; 21
				break;
     c14:	08 95       	ret
			}
		}
		break;
		case PD:
		if(READ_BIT(DDRD,pinNUM))
     c16:	21 b3       	in	r18, 0x11	; 17
     c18:	30 e0       	ldi	r19, 0x00	; 0
     c1a:	09 2e       	mov	r0, r25
     c1c:	02 c0       	rjmp	.+4      	; 0xc22 <DIO_SetPin+0x126>
     c1e:	35 95       	asr	r19
     c20:	27 95       	ror	r18
     c22:	0a 94       	dec	r0
     c24:	e2 f7       	brpl	.-8      	; 0xc1e <DIO_SetPin+0x122>
     c26:	20 ff       	sbrs	r18, 0
     c28:	1f c0       	rjmp	.+62     	; 0xc68 <DIO_SetPin+0x16c>
		{
			switch(volt)
     c2a:	66 23       	and	r22, r22
     c2c:	19 f0       	breq	.+6      	; 0xc34 <DIO_SetPin+0x138>
     c2e:	61 30       	cpi	r22, 0x01	; 1
     c30:	79 f0       	breq	.+30     	; 0xc50 <DIO_SetPin+0x154>
     c32:	08 95       	ret
			{
				case LOW:
				CLR_BIT(PORTD,pinNUM);
     c34:	42 b3       	in	r20, 0x12	; 18
     c36:	21 e0       	ldi	r18, 0x01	; 1
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	b9 01       	movw	r22, r18
     c3c:	02 c0       	rjmp	.+4      	; 0xc42 <DIO_SetPin+0x146>
     c3e:	66 0f       	add	r22, r22
     c40:	77 1f       	adc	r23, r23
     c42:	9a 95       	dec	r25
     c44:	e2 f7       	brpl	.-8      	; 0xc3e <DIO_SetPin+0x142>
     c46:	cb 01       	movw	r24, r22
     c48:	80 95       	com	r24
     c4a:	84 23       	and	r24, r20
     c4c:	82 bb       	out	0x12, r24	; 18
				break;
     c4e:	08 95       	ret
				case HIGH:
				SET_BIT(PORTD,pinNUM);
     c50:	42 b3       	in	r20, 0x12	; 18
     c52:	21 e0       	ldi	r18, 0x01	; 1
     c54:	30 e0       	ldi	r19, 0x00	; 0
     c56:	b9 01       	movw	r22, r18
     c58:	02 c0       	rjmp	.+4      	; 0xc5e <DIO_SetPin+0x162>
     c5a:	66 0f       	add	r22, r22
     c5c:	77 1f       	adc	r23, r23
     c5e:	9a 95       	dec	r25
     c60:	e2 f7       	brpl	.-8      	; 0xc5a <DIO_SetPin+0x15e>
     c62:	cb 01       	movw	r24, r22
     c64:	84 2b       	or	r24, r20
     c66:	82 bb       	out	0x12, r24	; 18
     c68:	08 95       	ret

00000c6a <__vector_17>:
{
	EEPROM_Fptr=local_fptr;
}

ISR(EE_RDY_vect)
{
     c6a:	1f 92       	push	r1
     c6c:	0f 92       	push	r0
     c6e:	0f b6       	in	r0, 0x3f	; 63
     c70:	0f 92       	push	r0
     c72:	11 24       	eor	r1, r1
     c74:	2f 93       	push	r18
     c76:	3f 93       	push	r19
     c78:	4f 93       	push	r20
     c7a:	5f 93       	push	r21
     c7c:	6f 93       	push	r22
     c7e:	7f 93       	push	r23
     c80:	8f 93       	push	r24
     c82:	9f 93       	push	r25
     c84:	af 93       	push	r26
     c86:	bf 93       	push	r27
     c88:	ef 93       	push	r30
     c8a:	ff 93       	push	r31
	if (EEPROM_Fptr!=NULLPTR)
     c8c:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <EEPROM_Fptr>
     c90:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <EEPROM_Fptr+0x1>
     c94:	e2 30       	cpi	r30, 0x02	; 2
     c96:	f1 05       	cpc	r31, r1
     c98:	09 f0       	breq	.+2      	; 0xc9c <__vector_17+0x32>
	{
		EEPROM_Fptr();
     c9a:	09 95       	icall
	}
     c9c:	ff 91       	pop	r31
     c9e:	ef 91       	pop	r30
     ca0:	bf 91       	pop	r27
     ca2:	af 91       	pop	r26
     ca4:	9f 91       	pop	r25
     ca6:	8f 91       	pop	r24
     ca8:	7f 91       	pop	r23
     caa:	6f 91       	pop	r22
     cac:	5f 91       	pop	r21
     cae:	4f 91       	pop	r20
     cb0:	3f 91       	pop	r19
     cb2:	2f 91       	pop	r18
     cb4:	0f 90       	pop	r0
     cb6:	0f be       	out	0x3f, r0	; 63
     cb8:	0f 90       	pop	r0
     cba:	1f 90       	pop	r1
     cbc:	18 95       	reti

00000cbe <__vector_1>:
}

/*******************************ISR********************************/

ISR(INT0_vect)
{
     cbe:	1f 92       	push	r1
     cc0:	0f 92       	push	r0
     cc2:	0f b6       	in	r0, 0x3f	; 63
     cc4:	0f 92       	push	r0
     cc6:	11 24       	eor	r1, r1
     cc8:	2f 93       	push	r18
     cca:	3f 93       	push	r19
     ccc:	4f 93       	push	r20
     cce:	5f 93       	push	r21
     cd0:	6f 93       	push	r22
     cd2:	7f 93       	push	r23
     cd4:	8f 93       	push	r24
     cd6:	9f 93       	push	r25
     cd8:	af 93       	push	r26
     cda:	bf 93       	push	r27
     cdc:	ef 93       	push	r30
     cde:	ff 93       	push	r31
	if (INT0_Fptr!=NULLPTR)
     ce0:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <INT0_Fptr>
     ce4:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <INT0_Fptr+0x1>
     ce8:	e2 30       	cpi	r30, 0x02	; 2
     cea:	f1 05       	cpc	r31, r1
     cec:	09 f0       	breq	.+2      	; 0xcf0 <__vector_1+0x32>
	{
		INT0_Fptr();
     cee:	09 95       	icall
	}
	
	
}
     cf0:	ff 91       	pop	r31
     cf2:	ef 91       	pop	r30
     cf4:	bf 91       	pop	r27
     cf6:	af 91       	pop	r26
     cf8:	9f 91       	pop	r25
     cfa:	8f 91       	pop	r24
     cfc:	7f 91       	pop	r23
     cfe:	6f 91       	pop	r22
     d00:	5f 91       	pop	r21
     d02:	4f 91       	pop	r20
     d04:	3f 91       	pop	r19
     d06:	2f 91       	pop	r18
     d08:	0f 90       	pop	r0
     d0a:	0f be       	out	0x3f, r0	; 63
     d0c:	0f 90       	pop	r0
     d0e:	1f 90       	pop	r1
     d10:	18 95       	reti

00000d12 <__vector_2>:
ISR(INT1_vect,ISR_NOBLOCK)
{
     d12:	78 94       	sei
     d14:	1f 92       	push	r1
     d16:	0f 92       	push	r0
     d18:	0f b6       	in	r0, 0x3f	; 63
     d1a:	0f 92       	push	r0
     d1c:	11 24       	eor	r1, r1
     d1e:	2f 93       	push	r18
     d20:	3f 93       	push	r19
     d22:	4f 93       	push	r20
     d24:	5f 93       	push	r21
     d26:	6f 93       	push	r22
     d28:	7f 93       	push	r23
     d2a:	8f 93       	push	r24
     d2c:	9f 93       	push	r25
     d2e:	af 93       	push	r26
     d30:	bf 93       	push	r27
     d32:	ef 93       	push	r30
     d34:	ff 93       	push	r31
	if (INT1_Fptr!=NULLPTR)
     d36:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <INT1_Fptr>
     d3a:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <INT1_Fptr+0x1>
     d3e:	e2 30       	cpi	r30, 0x02	; 2
     d40:	f1 05       	cpc	r31, r1
     d42:	09 f0       	breq	.+2      	; 0xd46 <__vector_2+0x34>
	{
		INT1_Fptr();
     d44:	09 95       	icall
	}
}
     d46:	ff 91       	pop	r31
     d48:	ef 91       	pop	r30
     d4a:	bf 91       	pop	r27
     d4c:	af 91       	pop	r26
     d4e:	9f 91       	pop	r25
     d50:	8f 91       	pop	r24
     d52:	7f 91       	pop	r23
     d54:	6f 91       	pop	r22
     d56:	5f 91       	pop	r21
     d58:	4f 91       	pop	r20
     d5a:	3f 91       	pop	r19
     d5c:	2f 91       	pop	r18
     d5e:	0f 90       	pop	r0
     d60:	0f be       	out	0x3f, r0	; 63
     d62:	0f 90       	pop	r0
     d64:	1f 90       	pop	r1
     d66:	18 95       	reti

00000d68 <__vector_3>:
ISR(INT2_vect)
{
     d68:	1f 92       	push	r1
     d6a:	0f 92       	push	r0
     d6c:	0f b6       	in	r0, 0x3f	; 63
     d6e:	0f 92       	push	r0
     d70:	11 24       	eor	r1, r1
     d72:	2f 93       	push	r18
     d74:	3f 93       	push	r19
     d76:	4f 93       	push	r20
     d78:	5f 93       	push	r21
     d7a:	6f 93       	push	r22
     d7c:	7f 93       	push	r23
     d7e:	8f 93       	push	r24
     d80:	9f 93       	push	r25
     d82:	af 93       	push	r26
     d84:	bf 93       	push	r27
     d86:	ef 93       	push	r30
     d88:	ff 93       	push	r31
	if (INT2_Fptr!=NULLPTR)
     d8a:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <INT2_Fptr>
     d8e:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <INT2_Fptr+0x1>
     d92:	e2 30       	cpi	r30, 0x02	; 2
     d94:	f1 05       	cpc	r31, r1
     d96:	09 f0       	breq	.+2      	; 0xd9a <__vector_3+0x32>
	{
		INT2_Fptr();
     d98:	09 95       	icall
	}
	
}
     d9a:	ff 91       	pop	r31
     d9c:	ef 91       	pop	r30
     d9e:	bf 91       	pop	r27
     da0:	af 91       	pop	r26
     da2:	9f 91       	pop	r25
     da4:	8f 91       	pop	r24
     da6:	7f 91       	pop	r23
     da8:	6f 91       	pop	r22
     daa:	5f 91       	pop	r21
     dac:	4f 91       	pop	r20
     dae:	3f 91       	pop	r19
     db0:	2f 91       	pop	r18
     db2:	0f 90       	pop	r0
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	0f 90       	pop	r0
     db8:	1f 90       	pop	r1
     dba:	18 95       	reti

00000dbc <__vector_12>:
{
	SPI_Fptr = PtrToFunc;
}

ISR(SPI_STC_vect)
{
     dbc:	1f 92       	push	r1
     dbe:	0f 92       	push	r0
     dc0:	0f b6       	in	r0, 0x3f	; 63
     dc2:	0f 92       	push	r0
     dc4:	11 24       	eor	r1, r1
     dc6:	2f 93       	push	r18
     dc8:	3f 93       	push	r19
     dca:	4f 93       	push	r20
     dcc:	5f 93       	push	r21
     dce:	6f 93       	push	r22
     dd0:	7f 93       	push	r23
     dd2:	8f 93       	push	r24
     dd4:	9f 93       	push	r25
     dd6:	af 93       	push	r26
     dd8:	bf 93       	push	r27
     dda:	ef 93       	push	r30
     ddc:	ff 93       	push	r31
	if (SPI_Fptr!=NULLPTR)
     dde:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <SPI_Fptr>
     de2:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <SPI_Fptr+0x1>
     de6:	e2 30       	cpi	r30, 0x02	; 2
     de8:	f1 05       	cpc	r31, r1
     dea:	09 f0       	breq	.+2      	; 0xdee <__vector_12+0x32>
	{
		SPI_Fptr();
     dec:	09 95       	icall
	}
     dee:	ff 91       	pop	r31
     df0:	ef 91       	pop	r30
     df2:	bf 91       	pop	r27
     df4:	af 91       	pop	r26
     df6:	9f 91       	pop	r25
     df8:	8f 91       	pop	r24
     dfa:	7f 91       	pop	r23
     dfc:	6f 91       	pop	r22
     dfe:	5f 91       	pop	r21
     e00:	4f 91       	pop	r20
     e02:	3f 91       	pop	r19
     e04:	2f 91       	pop	r18
     e06:	0f 90       	pop	r0
     e08:	0f be       	out	0x3f, r0	; 63
     e0a:	0f 90       	pop	r0
     e0c:	1f 90       	pop	r1
     e0e:	18 95       	reti

00000e10 <__vector_11>:
{
	Timer2_OVF_Fptr=local_fptr;
}
void TIMER2_OC_SetCallBack(void(*local_fptr)(void))
{
	Timer2_OC_Fptr=local_fptr;
     e10:	1f 92       	push	r1
     e12:	0f 92       	push	r0
     e14:	0f b6       	in	r0, 0x3f	; 63
     e16:	0f 92       	push	r0
     e18:	11 24       	eor	r1, r1
     e1a:	2f 93       	push	r18
     e1c:	3f 93       	push	r19
     e1e:	4f 93       	push	r20
     e20:	5f 93       	push	r21
     e22:	6f 93       	push	r22
     e24:	7f 93       	push	r23
     e26:	8f 93       	push	r24
     e28:	9f 93       	push	r25
     e2a:	af 93       	push	r26
     e2c:	bf 93       	push	r27
     e2e:	ef 93       	push	r30
     e30:	ff 93       	push	r31
     e32:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <Timer0_OVF_Fptr>
     e36:	f0 91 7f 00 	lds	r31, 0x007F	; 0x80007f <Timer0_OVF_Fptr+0x1>
     e3a:	e2 30       	cpi	r30, 0x02	; 2
     e3c:	f1 05       	cpc	r31, r1
     e3e:	09 f0       	breq	.+2      	; 0xe42 <__vector_11+0x32>
     e40:	09 95       	icall
     e42:	ff 91       	pop	r31
     e44:	ef 91       	pop	r30
     e46:	bf 91       	pop	r27
     e48:	af 91       	pop	r26
     e4a:	9f 91       	pop	r25
     e4c:	8f 91       	pop	r24
     e4e:	7f 91       	pop	r23
     e50:	6f 91       	pop	r22
     e52:	5f 91       	pop	r21
     e54:	4f 91       	pop	r20
     e56:	3f 91       	pop	r19
     e58:	2f 91       	pop	r18
     e5a:	0f 90       	pop	r0
     e5c:	0f be       	out	0x3f, r0	; 63
     e5e:	0f 90       	pop	r0
     e60:	1f 90       	pop	r1
     e62:	18 95       	reti

00000e64 <__vector_10>:
     e64:	1f 92       	push	r1
     e66:	0f 92       	push	r0
     e68:	0f b6       	in	r0, 0x3f	; 63
     e6a:	0f 92       	push	r0
     e6c:	11 24       	eor	r1, r1
     e6e:	2f 93       	push	r18
     e70:	3f 93       	push	r19
     e72:	4f 93       	push	r20
     e74:	5f 93       	push	r21
     e76:	6f 93       	push	r22
     e78:	7f 93       	push	r23
     e7a:	8f 93       	push	r24
     e7c:	9f 93       	push	r25
     e7e:	af 93       	push	r26
     e80:	bf 93       	push	r27
     e82:	ef 93       	push	r30
     e84:	ff 93       	push	r31
     e86:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <Timer0_OC_Fptr>
     e8a:	f0 91 7d 00 	lds	r31, 0x007D	; 0x80007d <Timer0_OC_Fptr+0x1>
     e8e:	e2 30       	cpi	r30, 0x02	; 2
     e90:	f1 05       	cpc	r31, r1
     e92:	09 f0       	breq	.+2      	; 0xe96 <__vector_10+0x32>
     e94:	09 95       	icall
     e96:	ff 91       	pop	r31
     e98:	ef 91       	pop	r30
     e9a:	bf 91       	pop	r27
     e9c:	af 91       	pop	r26
     e9e:	9f 91       	pop	r25
     ea0:	8f 91       	pop	r24
     ea2:	7f 91       	pop	r23
     ea4:	6f 91       	pop	r22
     ea6:	5f 91       	pop	r21
     ea8:	4f 91       	pop	r20
     eaa:	3f 91       	pop	r19
     eac:	2f 91       	pop	r18
     eae:	0f 90       	pop	r0
     eb0:	0f be       	out	0x3f, r0	; 63
     eb2:	0f 90       	pop	r0
     eb4:	1f 90       	pop	r1
     eb6:	18 95       	reti

00000eb8 <Timer1_Init>:
     eb8:	82 30       	cpi	r24, 0x02	; 2
     eba:	29 f1       	breq	.+74     	; 0xf06 <Timer1_Init+0x4e>
     ebc:	28 f4       	brcc	.+10     	; 0xec8 <Timer1_Init+0x10>
     ebe:	88 23       	and	r24, r24
     ec0:	41 f0       	breq	.+16     	; 0xed2 <Timer1_Init+0x1a>
     ec2:	81 30       	cpi	r24, 0x01	; 1
     ec4:	99 f0       	breq	.+38     	; 0xeec <Timer1_Init+0x34>
     ec6:	45 c0       	rjmp	.+138    	; 0xf52 <Timer1_Init+0x9a>
     ec8:	83 30       	cpi	r24, 0x03	; 3
     eca:	51 f1       	breq	.+84     	; 0xf20 <Timer1_Init+0x68>
     ecc:	84 30       	cpi	r24, 0x04	; 4
     ece:	a9 f1       	breq	.+106    	; 0xf3a <Timer1_Init+0x82>
     ed0:	40 c0       	rjmp	.+128    	; 0xf52 <Timer1_Init+0x9a>
     ed2:	8f b5       	in	r24, 0x2f	; 47
     ed4:	8e 7f       	andi	r24, 0xFE	; 254
     ed6:	8f bd       	out	0x2f, r24	; 47
     ed8:	8f b5       	in	r24, 0x2f	; 47
     eda:	8d 7f       	andi	r24, 0xFD	; 253
     edc:	8f bd       	out	0x2f, r24	; 47
     ede:	8e b5       	in	r24, 0x2e	; 46
     ee0:	87 7f       	andi	r24, 0xF7	; 247
     ee2:	8e bd       	out	0x2e, r24	; 46
     ee4:	8e b5       	in	r24, 0x2e	; 46
     ee6:	8f 7e       	andi	r24, 0xEF	; 239
     ee8:	8e bd       	out	0x2e, r24	; 46
     eea:	33 c0       	rjmp	.+102    	; 0xf52 <Timer1_Init+0x9a>
     eec:	8f b5       	in	r24, 0x2f	; 47
     eee:	8e 7f       	andi	r24, 0xFE	; 254
     ef0:	8f bd       	out	0x2f, r24	; 47
     ef2:	8f b5       	in	r24, 0x2f	; 47
     ef4:	8d 7f       	andi	r24, 0xFD	; 253
     ef6:	8f bd       	out	0x2f, r24	; 47
     ef8:	8e b5       	in	r24, 0x2e	; 46
     efa:	88 60       	ori	r24, 0x08	; 8
     efc:	8e bd       	out	0x2e, r24	; 46
     efe:	8e b5       	in	r24, 0x2e	; 46
     f00:	80 61       	ori	r24, 0x10	; 16
     f02:	8e bd       	out	0x2e, r24	; 46
     f04:	26 c0       	rjmp	.+76     	; 0xf52 <Timer1_Init+0x9a>
     f06:	8f b5       	in	r24, 0x2f	; 47
     f08:	8e 7f       	andi	r24, 0xFE	; 254
     f0a:	8f bd       	out	0x2f, r24	; 47
     f0c:	8f b5       	in	r24, 0x2f	; 47
     f0e:	8d 7f       	andi	r24, 0xFD	; 253
     f10:	8f bd       	out	0x2f, r24	; 47
     f12:	8e b5       	in	r24, 0x2e	; 46
     f14:	88 60       	ori	r24, 0x08	; 8
     f16:	8e bd       	out	0x2e, r24	; 46
     f18:	8e b5       	in	r24, 0x2e	; 46
     f1a:	8f 7e       	andi	r24, 0xEF	; 239
     f1c:	8e bd       	out	0x2e, r24	; 46
     f1e:	19 c0       	rjmp	.+50     	; 0xf52 <Timer1_Init+0x9a>
     f20:	8f b5       	in	r24, 0x2f	; 47
     f22:	8e 7f       	andi	r24, 0xFE	; 254
     f24:	8f bd       	out	0x2f, r24	; 47
     f26:	8f b5       	in	r24, 0x2f	; 47
     f28:	82 60       	ori	r24, 0x02	; 2
     f2a:	8f bd       	out	0x2f, r24	; 47
     f2c:	8e b5       	in	r24, 0x2e	; 46
     f2e:	88 60       	ori	r24, 0x08	; 8
     f30:	8e bd       	out	0x2e, r24	; 46
     f32:	8e b5       	in	r24, 0x2e	; 46
     f34:	80 61       	ori	r24, 0x10	; 16
     f36:	8e bd       	out	0x2e, r24	; 46
     f38:	0c c0       	rjmp	.+24     	; 0xf52 <Timer1_Init+0x9a>
     f3a:	8f b5       	in	r24, 0x2f	; 47
     f3c:	81 60       	ori	r24, 0x01	; 1
     f3e:	8f bd       	out	0x2f, r24	; 47
     f40:	8f b5       	in	r24, 0x2f	; 47
     f42:	82 60       	ori	r24, 0x02	; 2
     f44:	8f bd       	out	0x2f, r24	; 47
     f46:	8e b5       	in	r24, 0x2e	; 46
     f48:	88 60       	ori	r24, 0x08	; 8
     f4a:	8e bd       	out	0x2e, r24	; 46
     f4c:	8e b5       	in	r24, 0x2e	; 46
     f4e:	80 61       	ori	r24, 0x10	; 16
     f50:	8e bd       	out	0x2e, r24	; 46
     f52:	8e b5       	in	r24, 0x2e	; 46
     f54:	88 7f       	andi	r24, 0xF8	; 248
     f56:	8e bd       	out	0x2e, r24	; 46
     f58:	8e b5       	in	r24, 0x2e	; 46
     f5a:	68 2b       	or	r22, r24
     f5c:	6e bd       	out	0x2e, r22	; 46
     f5e:	08 95       	ret

00000f60 <__vector_9>:
     f60:	1f 92       	push	r1
     f62:	0f 92       	push	r0
     f64:	0f b6       	in	r0, 0x3f	; 63
     f66:	0f 92       	push	r0
     f68:	11 24       	eor	r1, r1
     f6a:	2f 93       	push	r18
     f6c:	3f 93       	push	r19
     f6e:	4f 93       	push	r20
     f70:	5f 93       	push	r21
     f72:	6f 93       	push	r22
     f74:	7f 93       	push	r23
     f76:	8f 93       	push	r24
     f78:	9f 93       	push	r25
     f7a:	af 93       	push	r26
     f7c:	bf 93       	push	r27
     f7e:	ef 93       	push	r30
     f80:	ff 93       	push	r31
     f82:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <Timer1_OVF_Fptr>
     f86:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <Timer1_OVF_Fptr+0x1>
     f8a:	e2 30       	cpi	r30, 0x02	; 2
     f8c:	f1 05       	cpc	r31, r1
     f8e:	09 f0       	breq	.+2      	; 0xf92 <__vector_9+0x32>
     f90:	09 95       	icall
     f92:	ff 91       	pop	r31
     f94:	ef 91       	pop	r30
     f96:	bf 91       	pop	r27
     f98:	af 91       	pop	r26
     f9a:	9f 91       	pop	r25
     f9c:	8f 91       	pop	r24
     f9e:	7f 91       	pop	r23
     fa0:	6f 91       	pop	r22
     fa2:	5f 91       	pop	r21
     fa4:	4f 91       	pop	r20
     fa6:	3f 91       	pop	r19
     fa8:	2f 91       	pop	r18
     faa:	0f 90       	pop	r0
     fac:	0f be       	out	0x3f, r0	; 63
     fae:	0f 90       	pop	r0
     fb0:	1f 90       	pop	r1
     fb2:	18 95       	reti

00000fb4 <__vector_7>:
     fb4:	1f 92       	push	r1
     fb6:	0f 92       	push	r0
     fb8:	0f b6       	in	r0, 0x3f	; 63
     fba:	0f 92       	push	r0
     fbc:	11 24       	eor	r1, r1
     fbe:	2f 93       	push	r18
     fc0:	3f 93       	push	r19
     fc2:	4f 93       	push	r20
     fc4:	5f 93       	push	r21
     fc6:	6f 93       	push	r22
     fc8:	7f 93       	push	r23
     fca:	8f 93       	push	r24
     fcc:	9f 93       	push	r25
     fce:	af 93       	push	r26
     fd0:	bf 93       	push	r27
     fd2:	ef 93       	push	r30
     fd4:	ff 93       	push	r31
     fd6:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <Timer1_OCA_Fptr>
     fda:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <Timer1_OCA_Fptr+0x1>
     fde:	e2 30       	cpi	r30, 0x02	; 2
     fe0:	f1 05       	cpc	r31, r1
     fe2:	09 f0       	breq	.+2      	; 0xfe6 <__vector_7+0x32>
     fe4:	09 95       	icall
     fe6:	ff 91       	pop	r31
     fe8:	ef 91       	pop	r30
     fea:	bf 91       	pop	r27
     fec:	af 91       	pop	r26
     fee:	9f 91       	pop	r25
     ff0:	8f 91       	pop	r24
     ff2:	7f 91       	pop	r23
     ff4:	6f 91       	pop	r22
     ff6:	5f 91       	pop	r21
     ff8:	4f 91       	pop	r20
     ffa:	3f 91       	pop	r19
     ffc:	2f 91       	pop	r18
     ffe:	0f 90       	pop	r0
    1000:	0f be       	out	0x3f, r0	; 63
    1002:	0f 90       	pop	r0
    1004:	1f 90       	pop	r1
    1006:	18 95       	reti

00001008 <__vector_8>:
    1008:	1f 92       	push	r1
    100a:	0f 92       	push	r0
    100c:	0f b6       	in	r0, 0x3f	; 63
    100e:	0f 92       	push	r0
    1010:	11 24       	eor	r1, r1
    1012:	2f 93       	push	r18
    1014:	3f 93       	push	r19
    1016:	4f 93       	push	r20
    1018:	5f 93       	push	r21
    101a:	6f 93       	push	r22
    101c:	7f 93       	push	r23
    101e:	8f 93       	push	r24
    1020:	9f 93       	push	r25
    1022:	af 93       	push	r26
    1024:	bf 93       	push	r27
    1026:	ef 93       	push	r30
    1028:	ff 93       	push	r31
    102a:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <Timer1_OCB_Fptr>
    102e:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <Timer1_OCB_Fptr+0x1>
    1032:	e2 30       	cpi	r30, 0x02	; 2
    1034:	f1 05       	cpc	r31, r1
    1036:	09 f0       	breq	.+2      	; 0x103a <__vector_8+0x32>
    1038:	09 95       	icall
    103a:	ff 91       	pop	r31
    103c:	ef 91       	pop	r30
    103e:	bf 91       	pop	r27
    1040:	af 91       	pop	r26
    1042:	9f 91       	pop	r25
    1044:	8f 91       	pop	r24
    1046:	7f 91       	pop	r23
    1048:	6f 91       	pop	r22
    104a:	5f 91       	pop	r21
    104c:	4f 91       	pop	r20
    104e:	3f 91       	pop	r19
    1050:	2f 91       	pop	r18
    1052:	0f 90       	pop	r0
    1054:	0f be       	out	0x3f, r0	; 63
    1056:	0f 90       	pop	r0
    1058:	1f 90       	pop	r1
    105a:	18 95       	reti

0000105c <__vector_6>:
    105c:	1f 92       	push	r1
    105e:	0f 92       	push	r0
    1060:	0f b6       	in	r0, 0x3f	; 63
    1062:	0f 92       	push	r0
    1064:	11 24       	eor	r1, r1
    1066:	2f 93       	push	r18
    1068:	3f 93       	push	r19
    106a:	4f 93       	push	r20
    106c:	5f 93       	push	r21
    106e:	6f 93       	push	r22
    1070:	7f 93       	push	r23
    1072:	8f 93       	push	r24
    1074:	9f 93       	push	r25
    1076:	af 93       	push	r26
    1078:	bf 93       	push	r27
    107a:	ef 93       	push	r30
    107c:	ff 93       	push	r31
    107e:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <Timer1_ICU_Fptr>
    1082:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <Timer1_ICU_Fptr+0x1>
    1086:	e2 30       	cpi	r30, 0x02	; 2
    1088:	f1 05       	cpc	r31, r1
    108a:	09 f0       	breq	.+2      	; 0x108e <__vector_6+0x32>
    108c:	09 95       	icall
    108e:	ff 91       	pop	r31
    1090:	ef 91       	pop	r30
    1092:	bf 91       	pop	r27
    1094:	af 91       	pop	r26
    1096:	9f 91       	pop	r25
    1098:	8f 91       	pop	r24
    109a:	7f 91       	pop	r23
    109c:	6f 91       	pop	r22
    109e:	5f 91       	pop	r21
    10a0:	4f 91       	pop	r20
    10a2:	3f 91       	pop	r19
    10a4:	2f 91       	pop	r18
    10a6:	0f 90       	pop	r0
    10a8:	0f be       	out	0x3f, r0	; 63
    10aa:	0f 90       	pop	r0
    10ac:	1f 90       	pop	r1
    10ae:	18 95       	reti

000010b0 <__vector_5>:
}
/*********************************Timer 2 ISR functions*********************************************/

ISR(TIMER2_OVF_vect)
{
    10b0:	1f 92       	push	r1
    10b2:	0f 92       	push	r0
    10b4:	0f b6       	in	r0, 0x3f	; 63
    10b6:	0f 92       	push	r0
    10b8:	11 24       	eor	r1, r1
    10ba:	2f 93       	push	r18
    10bc:	3f 93       	push	r19
    10be:	4f 93       	push	r20
    10c0:	5f 93       	push	r21
    10c2:	6f 93       	push	r22
    10c4:	7f 93       	push	r23
    10c6:	8f 93       	push	r24
    10c8:	9f 93       	push	r25
    10ca:	af 93       	push	r26
    10cc:	bf 93       	push	r27
    10ce:	ef 93       	push	r30
    10d0:	ff 93       	push	r31
	if(Timer2_OVF_Fptr!=NULLPTR)
    10d2:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <Timer2_OVF_Fptr>
    10d6:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <Timer2_OVF_Fptr+0x1>
    10da:	e2 30       	cpi	r30, 0x02	; 2
    10dc:	f1 05       	cpc	r31, r1
    10de:	09 f0       	breq	.+2      	; 0x10e2 <__vector_5+0x32>
	{
		Timer2_OVF_Fptr();
    10e0:	09 95       	icall
	}
}
    10e2:	ff 91       	pop	r31
    10e4:	ef 91       	pop	r30
    10e6:	bf 91       	pop	r27
    10e8:	af 91       	pop	r26
    10ea:	9f 91       	pop	r25
    10ec:	8f 91       	pop	r24
    10ee:	7f 91       	pop	r23
    10f0:	6f 91       	pop	r22
    10f2:	5f 91       	pop	r21
    10f4:	4f 91       	pop	r20
    10f6:	3f 91       	pop	r19
    10f8:	2f 91       	pop	r18
    10fa:	0f 90       	pop	r0
    10fc:	0f be       	out	0x3f, r0	; 63
    10fe:	0f 90       	pop	r0
    1100:	1f 90       	pop	r1
    1102:	18 95       	reti

00001104 <__vector_4>:


ISR(TIMER2_COMP_vect)
{
    1104:	1f 92       	push	r1
    1106:	0f 92       	push	r0
    1108:	0f b6       	in	r0, 0x3f	; 63
    110a:	0f 92       	push	r0
    110c:	11 24       	eor	r1, r1
    110e:	2f 93       	push	r18
    1110:	3f 93       	push	r19
    1112:	4f 93       	push	r20
    1114:	5f 93       	push	r21
    1116:	6f 93       	push	r22
    1118:	7f 93       	push	r23
    111a:	8f 93       	push	r24
    111c:	9f 93       	push	r25
    111e:	af 93       	push	r26
    1120:	bf 93       	push	r27
    1122:	ef 93       	push	r30
    1124:	ff 93       	push	r31
	if(Timer2_OC_Fptr!=NULLPTR)
    1126:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <Timer2_OC_Fptr>
    112a:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <Timer2_OC_Fptr+0x1>
    112e:	e2 30       	cpi	r30, 0x02	; 2
    1130:	f1 05       	cpc	r31, r1
    1132:	09 f0       	breq	.+2      	; 0x1136 <__vector_4+0x32>
	{
		Timer2_OC_Fptr();
    1134:	09 95       	icall
	}
}
    1136:	ff 91       	pop	r31
    1138:	ef 91       	pop	r30
    113a:	bf 91       	pop	r27
    113c:	af 91       	pop	r26
    113e:	9f 91       	pop	r25
    1140:	8f 91       	pop	r24
    1142:	7f 91       	pop	r23
    1144:	6f 91       	pop	r22
    1146:	5f 91       	pop	r21
    1148:	4f 91       	pop	r20
    114a:	3f 91       	pop	r19
    114c:	2f 91       	pop	r18
    114e:	0f 90       	pop	r0
    1150:	0f be       	out	0x3f, r0	; 63
    1152:	0f 90       	pop	r0
    1154:	1f 90       	pop	r1
    1156:	18 95       	reti

00001158 <UART_Init>:
	UART_RX_Fptr = LocalFptr;
}

void UART_TX_SetCallBack(void (*LocalFptr)(void))
{
	UART_TX_Fptr = LocalFptr;
    1158:	83 e3       	ldi	r24, 0x33	; 51
    115a:	89 b9       	out	0x09, r24	; 9
    115c:	8b b1       	in	r24, 0x0b	; 11
    115e:	8d 7f       	andi	r24, 0xFD	; 253
    1160:	8b b9       	out	0x0b, r24	; 11
    1162:	8a b1       	in	r24, 0x0a	; 10
    1164:	80 61       	ori	r24, 0x10	; 16
    1166:	8a b9       	out	0x0a, r24	; 10
    1168:	8a b1       	in	r24, 0x0a	; 10
    116a:	88 60       	ori	r24, 0x08	; 8
    116c:	8a b9       	out	0x0a, r24	; 10
    116e:	08 95       	ret

00001170 <UART_Receive>:
    1170:	5f 9b       	sbis	0x0b, 7	; 11
    1172:	fe cf       	rjmp	.-4      	; 0x1170 <UART_Receive>
    1174:	8c b1       	in	r24, 0x0c	; 12
    1176:	08 95       	ret

00001178 <__vector_13>:
}


ISR(UART_RX_vect)
{
    1178:	1f 92       	push	r1
    117a:	0f 92       	push	r0
    117c:	0f b6       	in	r0, 0x3f	; 63
    117e:	0f 92       	push	r0
    1180:	11 24       	eor	r1, r1
    1182:	2f 93       	push	r18
    1184:	3f 93       	push	r19
    1186:	4f 93       	push	r20
    1188:	5f 93       	push	r21
    118a:	6f 93       	push	r22
    118c:	7f 93       	push	r23
    118e:	8f 93       	push	r24
    1190:	9f 93       	push	r25
    1192:	af 93       	push	r26
    1194:	bf 93       	push	r27
    1196:	ef 93       	push	r30
    1198:	ff 93       	push	r31
	if (UART_RX_Fptr!=NULLPTR)
    119a:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <UART_RX_Fptr>
    119e:	f0 91 83 00 	lds	r31, 0x0083	; 0x800083 <UART_RX_Fptr+0x1>
    11a2:	e2 30       	cpi	r30, 0x02	; 2
    11a4:	f1 05       	cpc	r31, r1
    11a6:	09 f0       	breq	.+2      	; 0x11aa <__vector_13+0x32>
	{
		UART_RX_Fptr();
    11a8:	09 95       	icall
	}
}
    11aa:	ff 91       	pop	r31
    11ac:	ef 91       	pop	r30
    11ae:	bf 91       	pop	r27
    11b0:	af 91       	pop	r26
    11b2:	9f 91       	pop	r25
    11b4:	8f 91       	pop	r24
    11b6:	7f 91       	pop	r23
    11b8:	6f 91       	pop	r22
    11ba:	5f 91       	pop	r21
    11bc:	4f 91       	pop	r20
    11be:	3f 91       	pop	r19
    11c0:	2f 91       	pop	r18
    11c2:	0f 90       	pop	r0
    11c4:	0f be       	out	0x3f, r0	; 63
    11c6:	0f 90       	pop	r0
    11c8:	1f 90       	pop	r1
    11ca:	18 95       	reti

000011cc <__vector_15>:

ISR(UART_TX_vect)
{
    11cc:	1f 92       	push	r1
    11ce:	0f 92       	push	r0
    11d0:	0f b6       	in	r0, 0x3f	; 63
    11d2:	0f 92       	push	r0
    11d4:	11 24       	eor	r1, r1
    11d6:	2f 93       	push	r18
    11d8:	3f 93       	push	r19
    11da:	4f 93       	push	r20
    11dc:	5f 93       	push	r21
    11de:	6f 93       	push	r22
    11e0:	7f 93       	push	r23
    11e2:	8f 93       	push	r24
    11e4:	9f 93       	push	r25
    11e6:	af 93       	push	r26
    11e8:	bf 93       	push	r27
    11ea:	ef 93       	push	r30
    11ec:	ff 93       	push	r31
	if (UART_TX_Fptr!=NULLPTR)
    11ee:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <UART_TX_Fptr>
    11f2:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <UART_TX_Fptr+0x1>
    11f6:	e2 30       	cpi	r30, 0x02	; 2
    11f8:	f1 05       	cpc	r31, r1
    11fa:	09 f0       	breq	.+2      	; 0x11fe <__vector_15+0x32>
	{
		UART_TX_Fptr();
    11fc:	09 95       	icall
	}
    11fe:	ff 91       	pop	r31
    1200:	ef 91       	pop	r30
    1202:	bf 91       	pop	r27
    1204:	af 91       	pop	r26
    1206:	9f 91       	pop	r25
    1208:	8f 91       	pop	r24
    120a:	7f 91       	pop	r23
    120c:	6f 91       	pop	r22
    120e:	5f 91       	pop	r21
    1210:	4f 91       	pop	r20
    1212:	3f 91       	pop	r19
    1214:	2f 91       	pop	r18
    1216:	0f 90       	pop	r0
    1218:	0f be       	out	0x3f, r0	; 63
    121a:	0f 90       	pop	r0
    121c:	1f 90       	pop	r1
    121e:	18 95       	reti

00001220 <UART_ReceiveString>:
	}	
}


void UART_ReceiveString(u8*str)
{
    1220:	ef 92       	push	r14
    1222:	ff 92       	push	r15
    1224:	0f 93       	push	r16
    1226:	1f 93       	push	r17
    1228:	cf 93       	push	r28
    122a:	8c 01       	movw	r16, r24
	u8 i=0;
	str[0]=UART_Receive();
    122c:	0e 94 b8 08 	call	0x1170	; 0x1170 <UART_Receive>
    1230:	f8 01       	movw	r30, r16
    1232:	80 83       	st	Z, r24
}


void UART_ReceiveString(u8*str)
{
	u8 i=0;
    1234:	c0 e0       	ldi	r28, 0x00	; 0
	str[0]=UART_Receive();
	for (;str[i]!=0x0d;)
    1236:	08 c0       	rjmp	.+16     	; 0x1248 <UART_ReceiveString+0x28>
	{
		i++;
    1238:	cf 5f       	subi	r28, 0xFF	; 255
		str[i]=UART_Receive();
    123a:	78 01       	movw	r14, r16
    123c:	ec 0e       	add	r14, r28
    123e:	f1 1c       	adc	r15, r1
    1240:	0e 94 b8 08 	call	0x1170	; 0x1170 <UART_Receive>
    1244:	f7 01       	movw	r30, r14
    1246:	80 83       	st	Z, r24

void UART_ReceiveString(u8*str)
{
	u8 i=0;
	str[0]=UART_Receive();
	for (;str[i]!=0x0d;)
    1248:	f8 01       	movw	r30, r16
    124a:	ec 0f       	add	r30, r28
    124c:	f1 1d       	adc	r31, r1
    124e:	80 81       	ld	r24, Z
    1250:	8d 30       	cpi	r24, 0x0D	; 13
    1252:	91 f7       	brne	.-28     	; 0x1238 <UART_ReceiveString+0x18>
	{
		i++;
		str[i]=UART_Receive();
	}
	str[i]=0;
    1254:	10 82       	st	Z, r1
	
}
    1256:	cf 91       	pop	r28
    1258:	1f 91       	pop	r17
    125a:	0f 91       	pop	r16
    125c:	ff 90       	pop	r15
    125e:	ef 90       	pop	r14
    1260:	08 95       	ret

00001262 <__udivmodsi4>:
    1262:	a1 e2       	ldi	r26, 0x21	; 33
    1264:	1a 2e       	mov	r1, r26
    1266:	aa 1b       	sub	r26, r26
    1268:	bb 1b       	sub	r27, r27
    126a:	fd 01       	movw	r30, r26
    126c:	0d c0       	rjmp	.+26     	; 0x1288 <__udivmodsi4_ep>

0000126e <__udivmodsi4_loop>:
    126e:	aa 1f       	adc	r26, r26
    1270:	bb 1f       	adc	r27, r27
    1272:	ee 1f       	adc	r30, r30
    1274:	ff 1f       	adc	r31, r31
    1276:	a2 17       	cp	r26, r18
    1278:	b3 07       	cpc	r27, r19
    127a:	e4 07       	cpc	r30, r20
    127c:	f5 07       	cpc	r31, r21
    127e:	20 f0       	brcs	.+8      	; 0x1288 <__udivmodsi4_ep>
    1280:	a2 1b       	sub	r26, r18
    1282:	b3 0b       	sbc	r27, r19
    1284:	e4 0b       	sbc	r30, r20
    1286:	f5 0b       	sbc	r31, r21

00001288 <__udivmodsi4_ep>:
    1288:	66 1f       	adc	r22, r22
    128a:	77 1f       	adc	r23, r23
    128c:	88 1f       	adc	r24, r24
    128e:	99 1f       	adc	r25, r25
    1290:	1a 94       	dec	r1
    1292:	69 f7       	brne	.-38     	; 0x126e <__udivmodsi4_loop>
    1294:	60 95       	com	r22
    1296:	70 95       	com	r23
    1298:	80 95       	com	r24
    129a:	90 95       	com	r25
    129c:	9b 01       	movw	r18, r22
    129e:	ac 01       	movw	r20, r24
    12a0:	bd 01       	movw	r22, r26
    12a2:	cf 01       	movw	r24, r30
    12a4:	08 95       	ret

000012a6 <__umulhisi3>:
    12a6:	a2 9f       	mul	r26, r18
    12a8:	b0 01       	movw	r22, r0
    12aa:	b3 9f       	mul	r27, r19
    12ac:	c0 01       	movw	r24, r0
    12ae:	a3 9f       	mul	r26, r19
    12b0:	70 0d       	add	r23, r0
    12b2:	81 1d       	adc	r24, r1
    12b4:	11 24       	eor	r1, r1
    12b6:	91 1d       	adc	r25, r1
    12b8:	b2 9f       	mul	r27, r18
    12ba:	70 0d       	add	r23, r0
    12bc:	81 1d       	adc	r24, r1
    12be:	11 24       	eor	r1, r1
    12c0:	91 1d       	adc	r25, r1
    12c2:	08 95       	ret

000012c4 <__muluhisi3>:
    12c4:	0e 94 53 09 	call	0x12a6	; 0x12a6 <__umulhisi3>
    12c8:	a5 9f       	mul	r26, r21
    12ca:	90 0d       	add	r25, r0
    12cc:	b4 9f       	mul	r27, r20
    12ce:	90 0d       	add	r25, r0
    12d0:	a4 9f       	mul	r26, r20
    12d2:	80 0d       	add	r24, r0
    12d4:	91 1d       	adc	r25, r1
    12d6:	11 24       	eor	r1, r1
    12d8:	08 95       	ret

000012da <strtol>:
    12da:	a0 e0       	ldi	r26, 0x00	; 0
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	e3 e7       	ldi	r30, 0x73	; 115
    12e0:	f9 e0       	ldi	r31, 0x09	; 9
    12e2:	0c 94 af 0a 	jmp	0x155e	; 0x155e <__prologue_saves__+0x2>
    12e6:	5c 01       	movw	r10, r24
    12e8:	6b 01       	movw	r12, r22
    12ea:	7a 01       	movw	r14, r20
    12ec:	61 15       	cp	r22, r1
    12ee:	71 05       	cpc	r23, r1
    12f0:	19 f0       	breq	.+6      	; 0x12f8 <strtol+0x1e>
    12f2:	fb 01       	movw	r30, r22
    12f4:	91 83       	std	Z+1, r25	; 0x01
    12f6:	80 83       	st	Z, r24
    12f8:	e1 14       	cp	r14, r1
    12fa:	f1 04       	cpc	r15, r1
    12fc:	29 f0       	breq	.+10     	; 0x1308 <strtol+0x2e>
    12fe:	c7 01       	movw	r24, r14
    1300:	02 97       	sbiw	r24, 0x02	; 2
    1302:	83 97       	sbiw	r24, 0x23	; 35
    1304:	08 f0       	brcs	.+2      	; 0x1308 <strtol+0x2e>
    1306:	e5 c0       	rjmp	.+458    	; 0x14d2 <strtol+0x1f8>
    1308:	e5 01       	movw	r28, r10
    130a:	21 96       	adiw	r28, 0x01	; 1
    130c:	f5 01       	movw	r30, r10
    130e:	10 81       	ld	r17, Z
    1310:	81 2f       	mov	r24, r17
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	0e 94 83 0a 	call	0x1506	; 0x1506 <isspace>
    1318:	89 2b       	or	r24, r25
    131a:	11 f0       	breq	.+4      	; 0x1320 <strtol+0x46>
    131c:	5e 01       	movw	r10, r28
    131e:	f4 cf       	rjmp	.-24     	; 0x1308 <strtol+0x2e>
    1320:	1d 32       	cpi	r17, 0x2D	; 45
    1322:	29 f4       	brne	.+10     	; 0x132e <strtol+0x54>
    1324:	21 96       	adiw	r28, 0x01	; 1
    1326:	f5 01       	movw	r30, r10
    1328:	11 81       	ldd	r17, Z+1	; 0x01
    132a:	01 e0       	ldi	r16, 0x01	; 1
    132c:	07 c0       	rjmp	.+14     	; 0x133c <strtol+0x62>
    132e:	1b 32       	cpi	r17, 0x2B	; 43
    1330:	21 f4       	brne	.+8      	; 0x133a <strtol+0x60>
    1332:	e5 01       	movw	r28, r10
    1334:	22 96       	adiw	r28, 0x02	; 2
    1336:	f5 01       	movw	r30, r10
    1338:	11 81       	ldd	r17, Z+1	; 0x01
    133a:	00 e0       	ldi	r16, 0x00	; 0
    133c:	e1 14       	cp	r14, r1
    133e:	f1 04       	cpc	r15, r1
    1340:	09 f1       	breq	.+66     	; 0x1384 <strtol+0xaa>
    1342:	f0 e1       	ldi	r31, 0x10	; 16
    1344:	ef 16       	cp	r14, r31
    1346:	f1 04       	cpc	r15, r1
    1348:	29 f4       	brne	.+10     	; 0x1354 <strtol+0x7a>
    134a:	3f c0       	rjmp	.+126    	; 0x13ca <strtol+0xf0>
    134c:	10 e3       	ldi	r17, 0x30	; 48
    134e:	e1 14       	cp	r14, r1
    1350:	f1 04       	cpc	r15, r1
    1352:	21 f1       	breq	.+72     	; 0x139c <strtol+0xc2>
    1354:	28 e0       	ldi	r18, 0x08	; 8
    1356:	e2 16       	cp	r14, r18
    1358:	f1 04       	cpc	r15, r1
    135a:	01 f1       	breq	.+64     	; 0x139c <strtol+0xc2>
    135c:	54 f4       	brge	.+20     	; 0x1372 <strtol+0x98>
    135e:	e2 e0       	ldi	r30, 0x02	; 2
    1360:	ee 16       	cp	r14, r30
    1362:	f1 04       	cpc	r15, r1
    1364:	21 f5       	brne	.+72     	; 0x13ae <strtol+0xd4>
    1366:	81 2c       	mov	r8, r1
    1368:	91 2c       	mov	r9, r1
    136a:	a1 2c       	mov	r10, r1
    136c:	b0 e4       	ldi	r27, 0x40	; 64
    136e:	bb 2e       	mov	r11, r27
    1370:	3e c0       	rjmp	.+124    	; 0x13ee <strtol+0x114>
    1372:	fa e0       	ldi	r31, 0x0A	; 10
    1374:	ef 16       	cp	r14, r31
    1376:	f1 04       	cpc	r15, r1
    1378:	39 f0       	breq	.+14     	; 0x1388 <strtol+0xae>
    137a:	20 e1       	ldi	r18, 0x10	; 16
    137c:	e2 16       	cp	r14, r18
    137e:	f1 04       	cpc	r15, r1
    1380:	b1 f4       	brne	.+44     	; 0x13ae <strtol+0xd4>
    1382:	30 c0       	rjmp	.+96     	; 0x13e4 <strtol+0x10a>
    1384:	10 33       	cpi	r17, 0x30	; 48
    1386:	19 f1       	breq	.+70     	; 0x13ce <strtol+0xf4>
    1388:	fa e0       	ldi	r31, 0x0A	; 10
    138a:	ef 2e       	mov	r14, r31
    138c:	f1 2c       	mov	r15, r1
    138e:	ac ec       	ldi	r26, 0xCC	; 204
    1390:	8a 2e       	mov	r8, r26
    1392:	98 2c       	mov	r9, r8
    1394:	a8 2c       	mov	r10, r8
    1396:	ac e0       	ldi	r26, 0x0C	; 12
    1398:	ba 2e       	mov	r11, r26
    139a:	29 c0       	rjmp	.+82     	; 0x13ee <strtol+0x114>
    139c:	78 e0       	ldi	r23, 0x08	; 8
    139e:	e7 2e       	mov	r14, r23
    13a0:	f1 2c       	mov	r15, r1
    13a2:	81 2c       	mov	r8, r1
    13a4:	91 2c       	mov	r9, r1
    13a6:	a1 2c       	mov	r10, r1
    13a8:	e0 e1       	ldi	r30, 0x10	; 16
    13aa:	be 2e       	mov	r11, r30
    13ac:	20 c0       	rjmp	.+64     	; 0x13ee <strtol+0x114>
    13ae:	60 e0       	ldi	r22, 0x00	; 0
    13b0:	70 e0       	ldi	r23, 0x00	; 0
    13b2:	80 e0       	ldi	r24, 0x00	; 0
    13b4:	90 e8       	ldi	r25, 0x80	; 128
    13b6:	97 01       	movw	r18, r14
    13b8:	0f 2c       	mov	r0, r15
    13ba:	00 0c       	add	r0, r0
    13bc:	44 0b       	sbc	r20, r20
    13be:	55 0b       	sbc	r21, r21
    13c0:	0e 94 31 09 	call	0x1262	; 0x1262 <__udivmodsi4>
    13c4:	49 01       	movw	r8, r18
    13c6:	5a 01       	movw	r10, r20
    13c8:	12 c0       	rjmp	.+36     	; 0x13ee <strtol+0x114>
    13ca:	10 33       	cpi	r17, 0x30	; 48
    13cc:	59 f4       	brne	.+22     	; 0x13e4 <strtol+0x10a>
    13ce:	88 81       	ld	r24, Y
    13d0:	8f 7d       	andi	r24, 0xDF	; 223
    13d2:	88 35       	cpi	r24, 0x58	; 88
    13d4:	09 f0       	breq	.+2      	; 0x13d8 <strtol+0xfe>
    13d6:	ba cf       	rjmp	.-140    	; 0x134c <strtol+0x72>
    13d8:	19 81       	ldd	r17, Y+1	; 0x01
    13da:	22 96       	adiw	r28, 0x02	; 2
    13dc:	02 60       	ori	r16, 0x02	; 2
    13de:	80 e1       	ldi	r24, 0x10	; 16
    13e0:	e8 2e       	mov	r14, r24
    13e2:	f1 2c       	mov	r15, r1
    13e4:	81 2c       	mov	r8, r1
    13e6:	91 2c       	mov	r9, r1
    13e8:	a1 2c       	mov	r10, r1
    13ea:	68 e0       	ldi	r22, 0x08	; 8
    13ec:	b6 2e       	mov	r11, r22
    13ee:	40 e0       	ldi	r20, 0x00	; 0
    13f0:	60 e0       	ldi	r22, 0x00	; 0
    13f2:	70 e0       	ldi	r23, 0x00	; 0
    13f4:	cb 01       	movw	r24, r22
    13f6:	27 01       	movw	r4, r14
    13f8:	0f 2c       	mov	r0, r15
    13fa:	00 0c       	add	r0, r0
    13fc:	66 08       	sbc	r6, r6
    13fe:	77 08       	sbc	r7, r7
    1400:	fe 01       	movw	r30, r28
    1402:	50 ed       	ldi	r21, 0xD0	; 208
    1404:	35 2e       	mov	r3, r21
    1406:	31 0e       	add	r3, r17
    1408:	29 e0       	ldi	r18, 0x09	; 9
    140a:	23 15       	cp	r18, r3
    140c:	70 f4       	brcc	.+28     	; 0x142a <strtol+0x150>
    140e:	2f eb       	ldi	r18, 0xBF	; 191
    1410:	21 0f       	add	r18, r17
    1412:	2a 31       	cpi	r18, 0x1A	; 26
    1414:	18 f4       	brcc	.+6      	; 0x141c <strtol+0x142>
    1416:	39 ec       	ldi	r19, 0xC9	; 201
    1418:	33 2e       	mov	r3, r19
    141a:	06 c0       	rjmp	.+12     	; 0x1428 <strtol+0x14e>
    141c:	2f e9       	ldi	r18, 0x9F	; 159
    141e:	21 0f       	add	r18, r17
    1420:	2a 31       	cpi	r18, 0x1A	; 26
    1422:	18 f5       	brcc	.+70     	; 0x146a <strtol+0x190>
    1424:	29 ea       	ldi	r18, 0xA9	; 169
    1426:	32 2e       	mov	r3, r18
    1428:	31 0e       	add	r3, r17
    142a:	23 2d       	mov	r18, r3
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	2e 15       	cp	r18, r14
    1430:	3f 05       	cpc	r19, r15
    1432:	dc f4       	brge	.+54     	; 0x146a <strtol+0x190>
    1434:	47 fd       	sbrc	r20, 7
    1436:	16 c0       	rjmp	.+44     	; 0x1464 <strtol+0x18a>
    1438:	86 16       	cp	r8, r22
    143a:	97 06       	cpc	r9, r23
    143c:	a8 06       	cpc	r10, r24
    143e:	b9 06       	cpc	r11, r25
    1440:	70 f0       	brcs	.+28     	; 0x145e <strtol+0x184>
    1442:	a3 01       	movw	r20, r6
    1444:	92 01       	movw	r18, r4
    1446:	0e 94 9e 0a 	call	0x153c	; 0x153c <__mulsi3>
    144a:	63 0d       	add	r22, r3
    144c:	71 1d       	adc	r23, r1
    144e:	81 1d       	adc	r24, r1
    1450:	91 1d       	adc	r25, r1
    1452:	61 30       	cpi	r22, 0x01	; 1
    1454:	71 05       	cpc	r23, r1
    1456:	81 05       	cpc	r24, r1
    1458:	20 e8       	ldi	r18, 0x80	; 128
    145a:	92 07       	cpc	r25, r18
    145c:	10 f0       	brcs	.+4      	; 0x1462 <strtol+0x188>
    145e:	4f ef       	ldi	r20, 0xFF	; 255
    1460:	01 c0       	rjmp	.+2      	; 0x1464 <strtol+0x18a>
    1462:	41 e0       	ldi	r20, 0x01	; 1
    1464:	21 96       	adiw	r28, 0x01	; 1
    1466:	10 81       	ld	r17, Z
    1468:	cb cf       	rjmp	.-106    	; 0x1400 <strtol+0x126>
    146a:	20 2f       	mov	r18, r16
    146c:	21 70       	andi	r18, 0x01	; 1
    146e:	c1 14       	cp	r12, r1
    1470:	d1 04       	cpc	r13, r1
    1472:	71 f0       	breq	.+28     	; 0x1490 <strtol+0x1b6>
    1474:	44 23       	and	r20, r20
    1476:	29 f0       	breq	.+10     	; 0x1482 <strtol+0x1a8>
    1478:	21 97       	sbiw	r28, 0x01	; 1
    147a:	f6 01       	movw	r30, r12
    147c:	d1 83       	std	Z+1, r29	; 0x01
    147e:	c0 83       	st	Z, r28
    1480:	07 c0       	rjmp	.+14     	; 0x1490 <strtol+0x1b6>
    1482:	01 ff       	sbrs	r16, 1
    1484:	19 c0       	rjmp	.+50     	; 0x14b8 <strtol+0x1de>
    1486:	22 97       	sbiw	r28, 0x02	; 2
    1488:	f6 01       	movw	r30, r12
    148a:	d1 83       	std	Z+1, r29	; 0x01
    148c:	c0 83       	st	Z, r28
    148e:	14 c0       	rjmp	.+40     	; 0x14b8 <strtol+0x1de>
    1490:	47 ff       	sbrs	r20, 7
    1492:	12 c0       	rjmp	.+36     	; 0x14b8 <strtol+0x1de>
    1494:	22 23       	and	r18, r18
    1496:	29 f0       	breq	.+10     	; 0x14a2 <strtol+0x1c8>
    1498:	60 e0       	ldi	r22, 0x00	; 0
    149a:	70 e0       	ldi	r23, 0x00	; 0
    149c:	80 e0       	ldi	r24, 0x00	; 0
    149e:	90 e8       	ldi	r25, 0x80	; 128
    14a0:	04 c0       	rjmp	.+8      	; 0x14aa <strtol+0x1d0>
    14a2:	6f ef       	ldi	r22, 0xFF	; 255
    14a4:	7f ef       	ldi	r23, 0xFF	; 255
    14a6:	8f ef       	ldi	r24, 0xFF	; 255
    14a8:	9f e7       	ldi	r25, 0x7F	; 127
    14aa:	22 e2       	ldi	r18, 0x22	; 34
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	30 93 c4 01 	sts	0x01C4, r19	; 0x8001c4 <errno+0x1>
    14b2:	20 93 c3 01 	sts	0x01C3, r18	; 0x8001c3 <errno>
    14b6:	09 c0       	rjmp	.+18     	; 0x14ca <strtol+0x1f0>
    14b8:	22 23       	and	r18, r18
    14ba:	81 f0       	breq	.+32     	; 0x14dc <strtol+0x202>
    14bc:	90 95       	com	r25
    14be:	80 95       	com	r24
    14c0:	70 95       	com	r23
    14c2:	61 95       	neg	r22
    14c4:	7f 4f       	sbci	r23, 0xFF	; 255
    14c6:	8f 4f       	sbci	r24, 0xFF	; 255
    14c8:	9f 4f       	sbci	r25, 0xFF	; 255
    14ca:	46 2f       	mov	r20, r22
    14cc:	37 2f       	mov	r19, r23
    14ce:	28 2f       	mov	r18, r24
    14d0:	12 c0       	rjmp	.+36     	; 0x14f6 <strtol+0x21c>
    14d2:	40 e0       	ldi	r20, 0x00	; 0
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	20 e0       	ldi	r18, 0x00	; 0
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	0d c0       	rjmp	.+26     	; 0x14f6 <strtol+0x21c>
    14dc:	97 ff       	sbrs	r25, 7
    14de:	f5 cf       	rjmp	.-22     	; 0x14ca <strtol+0x1f0>
    14e0:	82 e2       	ldi	r24, 0x22	; 34
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	90 93 c4 01 	sts	0x01C4, r25	; 0x8001c4 <errno+0x1>
    14e8:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <errno>
    14ec:	6f ef       	ldi	r22, 0xFF	; 255
    14ee:	7f ef       	ldi	r23, 0xFF	; 255
    14f0:	8f ef       	ldi	r24, 0xFF	; 255
    14f2:	9f e7       	ldi	r25, 0x7F	; 127
    14f4:	ea cf       	rjmp	.-44     	; 0x14ca <strtol+0x1f0>
    14f6:	64 2f       	mov	r22, r20
    14f8:	73 2f       	mov	r23, r19
    14fa:	82 2f       	mov	r24, r18
    14fc:	cd b7       	in	r28, 0x3d	; 61
    14fe:	de b7       	in	r29, 0x3e	; 62
    1500:	e1 e1       	ldi	r30, 0x11	; 17
    1502:	0c 94 cb 0a 	jmp	0x1596	; 0x1596 <__epilogue_restores__+0x2>

00001506 <isspace>:
    1506:	91 11       	cpse	r25, r1
    1508:	0c 94 9b 0a 	jmp	0x1536	; 0x1536 <__ctype_isfalse>
    150c:	80 32       	cpi	r24, 0x20	; 32
    150e:	19 f0       	breq	.+6      	; 0x1516 <isspace+0x10>
    1510:	89 50       	subi	r24, 0x09	; 9
    1512:	85 50       	subi	r24, 0x05	; 5
    1514:	c8 f7       	brcc	.-14     	; 0x1508 <isspace+0x2>
    1516:	08 95       	ret

00001518 <strncpy>:
    1518:	fb 01       	movw	r30, r22
    151a:	dc 01       	movw	r26, r24
    151c:	41 50       	subi	r20, 0x01	; 1
    151e:	50 40       	sbci	r21, 0x00	; 0
    1520:	48 f0       	brcs	.+18     	; 0x1534 <strncpy+0x1c>
    1522:	01 90       	ld	r0, Z+
    1524:	0d 92       	st	X+, r0
    1526:	00 20       	and	r0, r0
    1528:	c9 f7       	brne	.-14     	; 0x151c <strncpy+0x4>
    152a:	01 c0       	rjmp	.+2      	; 0x152e <strncpy+0x16>
    152c:	1d 92       	st	X+, r1
    152e:	41 50       	subi	r20, 0x01	; 1
    1530:	50 40       	sbci	r21, 0x00	; 0
    1532:	e0 f7       	brcc	.-8      	; 0x152c <strncpy+0x14>
    1534:	08 95       	ret

00001536 <__ctype_isfalse>:
    1536:	99 27       	eor	r25, r25
    1538:	88 27       	eor	r24, r24

0000153a <__ctype_istrue>:
    153a:	08 95       	ret

0000153c <__mulsi3>:
    153c:	db 01       	movw	r26, r22
    153e:	8f 93       	push	r24
    1540:	9f 93       	push	r25
    1542:	0e 94 62 09 	call	0x12c4	; 0x12c4 <__muluhisi3>
    1546:	bf 91       	pop	r27
    1548:	af 91       	pop	r26
    154a:	a2 9f       	mul	r26, r18
    154c:	80 0d       	add	r24, r0
    154e:	91 1d       	adc	r25, r1
    1550:	a3 9f       	mul	r26, r19
    1552:	90 0d       	add	r25, r0
    1554:	b2 9f       	mul	r27, r18
    1556:	90 0d       	add	r25, r0
    1558:	11 24       	eor	r1, r1
    155a:	08 95       	ret

0000155c <__prologue_saves__>:
    155c:	2f 92       	push	r2
    155e:	3f 92       	push	r3
    1560:	4f 92       	push	r4
    1562:	5f 92       	push	r5
    1564:	6f 92       	push	r6
    1566:	7f 92       	push	r7
    1568:	8f 92       	push	r8
    156a:	9f 92       	push	r9
    156c:	af 92       	push	r10
    156e:	bf 92       	push	r11
    1570:	cf 92       	push	r12
    1572:	df 92       	push	r13
    1574:	ef 92       	push	r14
    1576:	ff 92       	push	r15
    1578:	0f 93       	push	r16
    157a:	1f 93       	push	r17
    157c:	cf 93       	push	r28
    157e:	df 93       	push	r29
    1580:	cd b7       	in	r28, 0x3d	; 61
    1582:	de b7       	in	r29, 0x3e	; 62
    1584:	ca 1b       	sub	r28, r26
    1586:	db 0b       	sbc	r29, r27
    1588:	0f b6       	in	r0, 0x3f	; 63
    158a:	f8 94       	cli
    158c:	de bf       	out	0x3e, r29	; 62
    158e:	0f be       	out	0x3f, r0	; 63
    1590:	cd bf       	out	0x3d, r28	; 61
    1592:	09 94       	ijmp

00001594 <__epilogue_restores__>:
    1594:	2a 88       	ldd	r2, Y+18	; 0x12
    1596:	39 88       	ldd	r3, Y+17	; 0x11
    1598:	48 88       	ldd	r4, Y+16	; 0x10
    159a:	5f 84       	ldd	r5, Y+15	; 0x0f
    159c:	6e 84       	ldd	r6, Y+14	; 0x0e
    159e:	7d 84       	ldd	r7, Y+13	; 0x0d
    15a0:	8c 84       	ldd	r8, Y+12	; 0x0c
    15a2:	9b 84       	ldd	r9, Y+11	; 0x0b
    15a4:	aa 84       	ldd	r10, Y+10	; 0x0a
    15a6:	b9 84       	ldd	r11, Y+9	; 0x09
    15a8:	c8 84       	ldd	r12, Y+8	; 0x08
    15aa:	df 80       	ldd	r13, Y+7	; 0x07
    15ac:	ee 80       	ldd	r14, Y+6	; 0x06
    15ae:	fd 80       	ldd	r15, Y+5	; 0x05
    15b0:	0c 81       	ldd	r16, Y+4	; 0x04
    15b2:	1b 81       	ldd	r17, Y+3	; 0x03
    15b4:	aa 81       	ldd	r26, Y+2	; 0x02
    15b6:	b9 81       	ldd	r27, Y+1	; 0x01
    15b8:	ce 0f       	add	r28, r30
    15ba:	d1 1d       	adc	r29, r1
    15bc:	0f b6       	in	r0, 0x3f	; 63
    15be:	f8 94       	cli
    15c0:	de bf       	out	0x3e, r29	; 62
    15c2:	0f be       	out	0x3f, r0	; 63
    15c4:	cd bf       	out	0x3d, r28	; 61
    15c6:	ed 01       	movw	r28, r26
    15c8:	08 95       	ret

000015ca <_exit>:
    15ca:	f8 94       	cli

000015cc <__stop_program>:
    15cc:	ff cf       	rjmp	.-2      	; 0x15cc <__stop_program>
